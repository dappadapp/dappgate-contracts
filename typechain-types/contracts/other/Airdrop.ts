/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Airdrop {
  export type ParticipantStruct = {
    userAddress: AddressLike;
    airdropAmount: BigNumberish;
  };

  export type ParticipantStructOutput = [
    userAddress: string,
    airdropAmount: bigint
  ] & { userAddress: string; airdropAmount: bigint };
}

export interface AirdropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "addToken"
      | "checkWhitelistEligibility"
      | "claim"
      | "claimed"
      | "getParticipants"
      | "getRoleAdmin"
      | "getToken"
      | "grantRole"
      | "hasRole"
      | "participants"
      | "renounceRole"
      | "revokeRole"
      | "setMerkleRoot"
      | "setParticipants"
      | "supportsInterface"
      | "token"
      | "totalAirdropAmount"
      | "totalParticipants"
      | "totalSupply"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropClaimed"
      | "ParticipantsUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenAdded"
      | "TokenUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWhitelistEligibility",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipants",
    values: [Airdrop.ParticipantStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAirdropAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkWhitelistEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAirdropAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AirdropClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    airdropAmountPerWallet: BigNumberish,
    totalSupply: BigNumberish,
    totalParticipants: BigNumberish,
    claimedTime: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    airdropAmountPerWallet: bigint,
    totalSupply: bigint,
    totalParticipants: bigint,
    claimedTime: bigint
  ];
  export interface OutputObject {
    user: string;
    airdropAmountPerWallet: bigint;
    totalSupply: bigint;
    totalParticipants: bigint;
    claimedTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipantsUpdatedEvent {
  export type InputTuple = [_participants: Airdrop.ParticipantStruct[]];
  export type OutputTuple = [_participants: Airdrop.ParticipantStructOutput[]];
  export interface OutputObject {
    _participants: Airdrop.ParticipantStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [tokenAmount: BigNumberish];
  export type OutputTuple = [tokenAmount: bigint];
  export interface OutputObject {
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUpdatedEvent {
  export type InputTuple = [tokenAddress: AddressLike];
  export type OutputTuple = [tokenAddress: string];
  export interface OutputObject {
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Airdrop extends BaseContract {
  connect(runner?: ContractRunner | null): Airdrop;
  waitForDeployment(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  addToken: TypedContractMethod<
    [tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkWhitelistEligibility: TypedContractMethod<
    [userAddress: AddressLike, whitelistMerkleProof: BytesLike[]],
    [boolean],
    "view"
  >;

  claim: TypedContractMethod<
    [whitelistMerkleProof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  claimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getParticipants: TypedContractMethod<
    [],
    [Airdrop.ParticipantStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getToken: TypedContractMethod<[], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  participants: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { userAddress: string; airdropAmount: bigint }],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setMerkleRoot: TypedContractMethod<
    [_whitelistMerkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  setParticipants: TypedContractMethod<
    [_participants: Airdrop.ParticipantStruct[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  totalAirdropAmount: TypedContractMethod<[], [bigint], "view">;

  totalParticipants: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<[tokenAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkWhitelistEligibility"
  ): TypedContractMethod<
    [userAddress: AddressLike, whitelistMerkleProof: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [whitelistMerkleProof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getParticipants"
  ): TypedContractMethod<[], [Airdrop.ParticipantStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { userAddress: string; airdropAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMerkleRoot"
  ): TypedContractMethod<
    [_whitelistMerkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setParticipants"
  ): TypedContractMethod<
    [_participants: Airdrop.ParticipantStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAirdropAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalParticipants"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AirdropClaimed"
  ): TypedContractEvent<
    AirdropClaimedEvent.InputTuple,
    AirdropClaimedEvent.OutputTuple,
    AirdropClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ParticipantsUpdated"
  ): TypedContractEvent<
    ParticipantsUpdatedEvent.InputTuple,
    ParticipantsUpdatedEvent.OutputTuple,
    ParticipantsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenUpdated"
  ): TypedContractEvent<
    TokenUpdatedEvent.InputTuple,
    TokenUpdatedEvent.OutputTuple,
    TokenUpdatedEvent.OutputObject
  >;

  filters: {
    "AirdropClaimed(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;
    AirdropClaimed: TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;

    "ParticipantsUpdated(tuple[])": TypedContractEvent<
      ParticipantsUpdatedEvent.InputTuple,
      ParticipantsUpdatedEvent.OutputTuple,
      ParticipantsUpdatedEvent.OutputObject
    >;
    ParticipantsUpdated: TypedContractEvent<
      ParticipantsUpdatedEvent.InputTuple,
      ParticipantsUpdatedEvent.OutputTuple,
      ParticipantsUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenAdded(uint256)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;

    "TokenUpdated(address)": TypedContractEvent<
      TokenUpdatedEvent.InputTuple,
      TokenUpdatedEvent.OutputTuple,
      TokenUpdatedEvent.OutputObject
    >;
    TokenUpdated: TypedContractEvent<
      TokenUpdatedEvent.InputTuple,
      TokenUpdatedEvent.OutputTuple,
      TokenUpdatedEvent.OutputObject
    >;
  };
}
