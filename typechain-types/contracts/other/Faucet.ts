/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FaucetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "addToken"
      | "addTokens"
      | "claim"
      | "claimDuration"
      | "claimedTimes"
      | "getClaimDuration"
      | "getClaimedTime"
      | "getRoleAdmin"
      | "getTokenAmountsToBeClaimed"
      | "getTokenAmountsToBeClaimedByTokenAddress"
      | "getTokenById"
      | "getTokenCount"
      | "getTokenSupplies"
      | "getTokenSupplyByTokenAddress"
      | "getTokens"
      | "grantRole"
      | "hasRole"
      | "renounceRole"
      | "revokeRole"
      | "setClaimDuration"
      | "setTokenAmountsToBeClaimed"
      | "setTokens"
      | "supportsInterface"
      | "tokenAmountsToBeClaimed"
      | "tokenCount"
      | "tokenSupplies"
      | "tokens"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimDurationUpdated"
      | "Claimed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenAdded"
      | "TokenAmountsToBeClaimedUpdated"
      | "TokenSuppliesUpdated"
      | "TokensAdded"
      | "TokensUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokens",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedTimes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountsToBeClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountsToBeClaimedByTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSupplies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSupplyByTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAmountsToBeClaimed",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAmountsToBeClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSupplies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountsToBeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountsToBeClaimedByTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSupplyByTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAmountsToBeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmountsToBeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ClaimDurationUpdatedEvent {
  export type InputTuple = [_claimDuration: BigNumberish];
  export type OutputTuple = [_claimDuration: bigint];
  export interface OutputObject {
    _claimDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    _userAddress: AddressLike,
    _claimedTime: BigNumberish
  ];
  export type OutputTuple = [_userAddress: string, _claimedTime: bigint];
  export interface OutputObject {
    _userAddress: string;
    _claimedTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [_tokenAmount: BigNumberish];
  export type OutputTuple = [_tokenAmount: bigint];
  export interface OutputObject {
    _tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAmountsToBeClaimedUpdatedEvent {
  export type InputTuple = [_tokenAmountsToBeClaimed: BigNumberish[]];
  export type OutputTuple = [_tokenAmountsToBeClaimed: bigint[]];
  export interface OutputObject {
    _tokenAmountsToBeClaimed: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSuppliesUpdatedEvent {
  export type InputTuple = [
    _tokens: BigNumberish[],
    _tokenSupplies: BigNumberish[]
  ];
  export type OutputTuple = [_tokens: bigint[], _tokenSupplies: bigint[]];
  export interface OutputObject {
    _tokens: bigint[];
    _tokenSupplies: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensAddedEvent {
  export type InputTuple = [_tokenAmounts: BigNumberish[]];
  export type OutputTuple = [_tokenAmounts: bigint[]];
  export interface OutputObject {
    _tokenAmounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensUpdatedEvent {
  export type InputTuple = [_tokens: AddressLike[]];
  export type OutputTuple = [_tokens: string[]];
  export interface OutputObject {
    _tokens: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Faucet extends BaseContract {
  connect(runner?: ContractRunner | null): Faucet;
  waitForDeployment(): Promise<this>;

  interface: FaucetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  addToken: TypedContractMethod<
    [tokenId: BigNumberish, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addTokens: TypedContractMethod<
    [tokenAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  claimDuration: TypedContractMethod<[], [bigint], "view">;

  claimedTimes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getClaimDuration: TypedContractMethod<[], [bigint], "view">;

  getClaimedTime: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenAmountsToBeClaimed: TypedContractMethod<[], [bigint[]], "view">;

  getTokenAmountsToBeClaimedByTokenAddress: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getTokenById: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getTokenCount: TypedContractMethod<[], [bigint], "view">;

  getTokenSupplies: TypedContractMethod<[], [bigint[]], "view">;

  getTokenSupplyByTokenAddress: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getTokens: TypedContractMethod<[], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setClaimDuration: TypedContractMethod<
    [newClaimDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenAmountsToBeClaimed: TypedContractMethod<
    [newTokenAmountsToBeClaimed: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setTokens: TypedContractMethod<
    [newTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenAmountsToBeClaimed: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  tokenCount: TypedContractMethod<[], [bigint], "view">;

  tokenSupplies: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  tokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [tokenId: BigNumberish, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTokens"
  ): TypedContractMethod<[tokenAmounts: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimedTimes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getClaimDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getClaimedTime"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenAmountsToBeClaimed"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTokenAmountsToBeClaimedByTokenAddress"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenById"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenSupplies"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTokenSupplyByTokenAddress"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimDuration"
  ): TypedContractMethod<
    [newClaimDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAmountsToBeClaimed"
  ): TypedContractMethod<
    [newTokenAmountsToBeClaimed: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokens"
  ): TypedContractMethod<[newTokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenAmountsToBeClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenSupplies"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ClaimDurationUpdated"
  ): TypedContractEvent<
    ClaimDurationUpdatedEvent.InputTuple,
    ClaimDurationUpdatedEvent.OutputTuple,
    ClaimDurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAmountsToBeClaimedUpdated"
  ): TypedContractEvent<
    TokenAmountsToBeClaimedUpdatedEvent.InputTuple,
    TokenAmountsToBeClaimedUpdatedEvent.OutputTuple,
    TokenAmountsToBeClaimedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSuppliesUpdated"
  ): TypedContractEvent<
    TokenSuppliesUpdatedEvent.InputTuple,
    TokenSuppliesUpdatedEvent.OutputTuple,
    TokenSuppliesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensAdded"
  ): TypedContractEvent<
    TokensAddedEvent.InputTuple,
    TokensAddedEvent.OutputTuple,
    TokensAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokensUpdated"
  ): TypedContractEvent<
    TokensUpdatedEvent.InputTuple,
    TokensUpdatedEvent.OutputTuple,
    TokensUpdatedEvent.OutputObject
  >;

  filters: {
    "ClaimDurationUpdated(uint256)": TypedContractEvent<
      ClaimDurationUpdatedEvent.InputTuple,
      ClaimDurationUpdatedEvent.OutputTuple,
      ClaimDurationUpdatedEvent.OutputObject
    >;
    ClaimDurationUpdated: TypedContractEvent<
      ClaimDurationUpdatedEvent.InputTuple,
      ClaimDurationUpdatedEvent.OutputTuple,
      ClaimDurationUpdatedEvent.OutputObject
    >;

    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenAdded(uint256)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;

    "TokenAmountsToBeClaimedUpdated(uint256[])": TypedContractEvent<
      TokenAmountsToBeClaimedUpdatedEvent.InputTuple,
      TokenAmountsToBeClaimedUpdatedEvent.OutputTuple,
      TokenAmountsToBeClaimedUpdatedEvent.OutputObject
    >;
    TokenAmountsToBeClaimedUpdated: TypedContractEvent<
      TokenAmountsToBeClaimedUpdatedEvent.InputTuple,
      TokenAmountsToBeClaimedUpdatedEvent.OutputTuple,
      TokenAmountsToBeClaimedUpdatedEvent.OutputObject
    >;

    "TokenSuppliesUpdated(uint256[],uint256[])": TypedContractEvent<
      TokenSuppliesUpdatedEvent.InputTuple,
      TokenSuppliesUpdatedEvent.OutputTuple,
      TokenSuppliesUpdatedEvent.OutputObject
    >;
    TokenSuppliesUpdated: TypedContractEvent<
      TokenSuppliesUpdatedEvent.InputTuple,
      TokenSuppliesUpdatedEvent.OutputTuple,
      TokenSuppliesUpdatedEvent.OutputObject
    >;

    "TokensAdded(uint256[])": TypedContractEvent<
      TokensAddedEvent.InputTuple,
      TokensAddedEvent.OutputTuple,
      TokensAddedEvent.OutputObject
    >;
    TokensAdded: TypedContractEvent<
      TokensAddedEvent.InputTuple,
      TokensAddedEvent.OutputTuple,
      TokensAddedEvent.OutputObject
    >;

    "TokensUpdated(address[])": TypedContractEvent<
      TokensUpdatedEvent.InputTuple,
      TokensUpdatedEvent.OutputTuple,
      TokensUpdatedEvent.OutputObject
    >;
    TokensUpdated: TypedContractEvent<
      TokensUpdatedEvent.InputTuple,
      TokensUpdatedEvent.OutputTuple,
      TokensUpdatedEvent.OutputObject
    >;
  };
}
