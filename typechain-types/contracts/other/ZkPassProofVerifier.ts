/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IZkPassProofVerifier {
  export type ZkPassProofStruct = {
    taskId: BytesLike;
    schemaId: BytesLike;
    uHash: BytesLike;
    publicFieldsHash: BytesLike;
    validator: AddressLike;
    allocatorSignature: BytesLike;
    validatorSignature: BytesLike;
  };

  export type ZkPassProofStructOutput = [
    taskId: string,
    schemaId: string,
    uHash: string,
    publicFieldsHash: string,
    validator: string,
    allocatorSignature: string,
    validatorSignature: string
  ] & {
    taskId: string;
    schemaId: string;
    uHash: string;
    publicFieldsHash: string;
    validator: string;
    allocatorSignature: string;
    validatorSignature: string;
  };
}

export interface ZkPassProofVerifierInterface extends Interface {
  getFunction(nameOrSignature: "defaultAllocator" | "verify"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "defaultAllocator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [IZkPassProofVerifier.ZkPassProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export interface ZkPassProofVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): ZkPassProofVerifier;
  waitForDeployment(): Promise<this>;

  interface: ZkPassProofVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  defaultAllocator: TypedContractMethod<[], [string], "view">;

  verify: TypedContractMethod<
    [_proof: IZkPassProofVerifier.ZkPassProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "defaultAllocator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [_proof: IZkPassProofVerifier.ZkPassProofStruct],
    [boolean],
    "view"
  >;

  filters: {};
}
