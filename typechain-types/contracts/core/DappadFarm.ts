/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDappadStake {
  export type StakeDetailsStruct = {
    interestRate: BigNumberish;
    tierCount: BigNumberish;
    lockDurations: BigNumberish[];
    lockDurationMultipliers: BigNumberish[];
    bonusEnd: BigNumberish;
    osWhitelistMerkleRoot: BytesLike;
    psWhitelistMerkleRoot: BytesLike;
    stakePaused: boolean;
  };

  export type StakeDetailsStructOutput = [
    interestRate: bigint,
    tierCount: bigint,
    lockDurations: bigint[],
    lockDurationMultipliers: bigint[],
    bonusEnd: bigint,
    osWhitelistMerkleRoot: string,
    psWhitelistMerkleRoot: string,
    stakePaused: boolean
  ] & {
    interestRate: bigint;
    tierCount: bigint;
    lockDurations: bigint[];
    lockDurationMultipliers: bigint[];
    bonusEnd: bigint;
    osWhitelistMerkleRoot: string;
    psWhitelistMerkleRoot: string;
    stakePaused: boolean;
  };

  export type StakeAddressesStruct = {
    osVestingContractAddress: AddressLike;
    psVestingContractAddress: AddressLike;
    tokenAddress: AddressLike;
    adminAddress: AddressLike;
  };

  export type StakeAddressesStructOutput = [
    osVestingContractAddress: string,
    psVestingContractAddress: string,
    tokenAddress: string,
    adminAddress: string
  ] & {
    osVestingContractAddress: string;
    psVestingContractAddress: string;
    tokenAddress: string;
    adminAddress: string;
  };

  export type StakeTierStruct = {
    minStakeAmount: BigNumberish;
    maxStakeAmount: BigNumberish;
    stakedAmount: BigNumberish;
    userCount: BigNumberish;
  };

  export type StakeTierStructOutput = [
    minStakeAmount: bigint,
    maxStakeAmount: bigint,
    stakedAmount: bigint,
    userCount: bigint
  ] & {
    minStakeAmount: bigint;
    maxStakeAmount: bigint;
    stakedAmount: bigint;
    userCount: bigint;
  };

  export type StakeParamsStruct = {
    stakeDetails: IDappadStake.StakeDetailsStruct;
    stakeAddresses: IDappadStake.StakeAddressesStruct;
    tiers: IDappadStake.StakeTierStruct[];
  };

  export type StakeParamsStructOutput = [
    stakeDetails: IDappadStake.StakeDetailsStructOutput,
    stakeAddresses: IDappadStake.StakeAddressesStructOutput,
    tiers: IDappadStake.StakeTierStructOutput[]
  ] & {
    stakeDetails: IDappadStake.StakeDetailsStructOutput;
    stakeAddresses: IDappadStake.StakeAddressesStructOutput;
    tiers: IDappadStake.StakeTierStructOutput[];
  };

  export type StakeFeaturesStruct = {
    interestRate: BigNumberish;
    stakedAmount: BigNumberish;
    stakeTime: BigNumberish;
    lockDurationIndex: BigNumberish;
  };

  export type StakeFeaturesStructOutput = [
    interestRate: bigint,
    stakedAmount: bigint,
    stakeTime: bigint,
    lockDurationIndex: bigint
  ] & {
    interestRate: bigint;
    stakedAmount: bigint;
    stakeTime: bigint;
    lockDurationIndex: bigint;
  };

  export type StakeStruct = {
    totalStakedAmount: BigNumberish;
    endTime: BigNumberish;
    tierIndex: BigNumberish;
    stakeCount: BigNumberish;
    stakeFeatures: IDappadStake.StakeFeaturesStruct[];
  };

  export type StakeStructOutput = [
    totalStakedAmount: bigint,
    endTime: bigint,
    tierIndex: bigint,
    stakeCount: bigint,
    stakeFeatures: IDappadStake.StakeFeaturesStructOutput[]
  ] & {
    totalStakedAmount: bigint;
    endTime: bigint;
    tierIndex: bigint;
    stakeCount: bigint;
    stakeFeatures: IDappadStake.StakeFeaturesStructOutput[];
  };
}

export interface DappadFarmInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "addReward"
      | "calculateRewardAmount"
      | "getLockDurationMultipliers"
      | "getLockDurations"
      | "getRoleAdmin"
      | "getTierByIndex"
      | "getTierCount"
      | "getUserStake"
      | "getUserStakeFeatures"
      | "getUserTierIndex"
      | "grantRole"
      | "hasRole"
      | "hasStaked"
      | "lpToken"
      | "renounceRole"
      | "revokeRole"
      | "rewardToken"
      | "setInterestRate"
      | "setStakePaused"
      | "stake"
      | "stakeAddresses"
      | "stakeDetails"
      | "stakeStatistics"
      | "stakes"
      | "supportsInterface"
      | "tiers"
      | "unstake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InterestRateUpdated"
      | "RewardAdded"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StakePausedUpdated"
      | "Staked"
      | "Unstaked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockDurationMultipliers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockDurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeFeatures",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTierIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakePaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tiers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockDurationMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasStaked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
}

export namespace InterestRateUpdatedEvent {
  export type InputTuple = [interestRate: BigNumberish];
  export type OutputTuple = [interestRate: bigint];
  export interface OutputObject {
    interestRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAddedEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    amount: BigNumberish,
    rewardBalance: BigNumberish,
    rewardTime: BigNumberish
  ];
  export type OutputTuple = [
    userAddress: string,
    amount: bigint,
    rewardBalance: bigint,
    rewardTime: bigint
  ];
  export interface OutputObject {
    userAddress: string;
    amount: bigint;
    rewardBalance: bigint;
    rewardTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakePausedUpdatedEvent {
  export type InputTuple = [stakePaused: boolean];
  export type OutputTuple = [stakePaused: boolean];
  export interface OutputObject {
    stakePaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    amount: BigNumberish,
    stake: IDappadStake.StakeStruct,
    stakeFeatures: IDappadStake.StakeFeaturesStruct[],
    stakedAmount: BigNumberish,
    totalStakedAmount: BigNumberish,
    totalParticipants: BigNumberish,
    tierStakedAmount: BigNumberish,
    tierUserCount: BigNumberish,
    stakeTime: BigNumberish
  ];
  export type OutputTuple = [
    userAddress: string,
    amount: bigint,
    stake: IDappadStake.StakeStructOutput,
    stakeFeatures: IDappadStake.StakeFeaturesStructOutput[],
    stakedAmount: bigint,
    totalStakedAmount: bigint,
    totalParticipants: bigint,
    tierStakedAmount: bigint,
    tierUserCount: bigint,
    stakeTime: bigint
  ];
  export interface OutputObject {
    userAddress: string;
    amount: bigint;
    stake: IDappadStake.StakeStructOutput;
    stakeFeatures: IDappadStake.StakeFeaturesStructOutput[];
    stakedAmount: bigint;
    totalStakedAmount: bigint;
    totalParticipants: bigint;
    tierStakedAmount: bigint;
    tierUserCount: bigint;
    stakeTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    amount: BigNumberish,
    userRewardAmount: BigNumberish,
    stake: IDappadStake.StakeStruct,
    stakeFeatures: IDappadStake.StakeFeaturesStruct[],
    stakedAmount: BigNumberish,
    totalStakedAmount: BigNumberish,
    totalParticipants: BigNumberish,
    rewardBalance: BigNumberish,
    totalRewardAmount: BigNumberish,
    tierStakedAmount: BigNumberish,
    tierUserCount: BigNumberish,
    stakeTime: BigNumberish
  ];
  export type OutputTuple = [
    userAddress: string,
    amount: bigint,
    userRewardAmount: bigint,
    stake: IDappadStake.StakeStructOutput,
    stakeFeatures: IDappadStake.StakeFeaturesStructOutput[],
    stakedAmount: bigint,
    totalStakedAmount: bigint,
    totalParticipants: bigint,
    rewardBalance: bigint,
    totalRewardAmount: bigint,
    tierStakedAmount: bigint,
    tierUserCount: bigint,
    stakeTime: bigint
  ];
  export interface OutputObject {
    userAddress: string;
    amount: bigint;
    userRewardAmount: bigint;
    stake: IDappadStake.StakeStructOutput;
    stakeFeatures: IDappadStake.StakeFeaturesStructOutput[];
    stakedAmount: bigint;
    totalStakedAmount: bigint;
    totalParticipants: bigint;
    rewardBalance: bigint;
    totalRewardAmount: bigint;
    tierStakedAmount: bigint;
    tierUserCount: bigint;
    stakeTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DappadFarm extends BaseContract {
  connect(runner?: ContractRunner | null): DappadFarm;
  waitForDeployment(): Promise<this>;

  interface: DappadFarmInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  addReward: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  calculateRewardAmount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getLockDurationMultipliers: TypedContractMethod<[], [bigint[]], "view">;

  getLockDurations: TypedContractMethod<[], [bigint[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTierByIndex: TypedContractMethod<
    [tierIndex: BigNumberish],
    [IDappadStake.StakeTierStructOutput],
    "view"
  >;

  getTierCount: TypedContractMethod<[], [bigint], "view">;

  getUserStake: TypedContractMethod<
    [userAddress: AddressLike],
    [IDappadStake.StakeStructOutput],
    "view"
  >;

  getUserStakeFeatures: TypedContractMethod<
    [userAddress: AddressLike, stakeIndex: BigNumberish],
    [IDappadStake.StakeFeaturesStructOutput],
    "view"
  >;

  getUserTierIndex: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasStaked: TypedContractMethod<[userAddress: AddressLike], [boolean], "view">;

  lpToken: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardToken: TypedContractMethod<[], [string], "view">;

  setInterestRate: TypedContractMethod<
    [interestRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakePaused: TypedContractMethod<
    [stakePaused: boolean],
    [boolean],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [amount: BigNumberish, lockDurationIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  stakeAddresses: TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        osVestingContractAddress: string;
        psVestingContractAddress: string;
        tokenAddress: string;
        adminAddress: string;
      }
    ],
    "view"
  >;

  stakeDetails: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string, string, boolean] & {
        interestRate: bigint;
        tierCount: bigint;
        bonusEnd: bigint;
        osWhitelistMerkleRoot: string;
        psWhitelistMerkleRoot: string;
        stakePaused: boolean;
      }
    ],
    "view"
  >;

  stakeStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        stakedAmount: bigint;
        totalStakedAmount: bigint;
        rewardBalance: bigint;
        totalRewardAmount: bigint;
        totalParticipants: bigint;
      }
    ],
    "view"
  >;

  stakes: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalStakedAmount: bigint;
        endTime: bigint;
        tierIndex: bigint;
        stakeCount: bigint;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tiers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        minStakeAmount: bigint;
        maxStakeAmount: bigint;
        stakedAmount: bigint;
        userCount: bigint;
      }
    ],
    "view"
  >;

  unstake: TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addReward"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateRewardAmount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLockDurationMultipliers"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLockDurations"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTierByIndex"
  ): TypedContractMethod<
    [tierIndex: BigNumberish],
    [IDappadStake.StakeTierStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTierCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStake"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [IDappadStake.StakeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStakeFeatures"
  ): TypedContractMethod<
    [userAddress: AddressLike, stakeIndex: BigNumberish],
    [IDappadStake.StakeFeaturesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTierIndex"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasStaked"
  ): TypedContractMethod<[userAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lpToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setInterestRate"
  ): TypedContractMethod<[interestRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakePaused"
  ): TypedContractMethod<[stakePaused: boolean], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [amount: BigNumberish, lockDurationIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeAddresses"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        osVestingContractAddress: string;
        psVestingContractAddress: string;
        tokenAddress: string;
        adminAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakeDetails"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string, string, boolean] & {
        interestRate: bigint;
        tierCount: bigint;
        bonusEnd: bigint;
        osWhitelistMerkleRoot: string;
        psWhitelistMerkleRoot: string;
        stakePaused: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakeStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        stakedAmount: bigint;
        totalStakedAmount: bigint;
        rewardBalance: bigint;
        totalRewardAmount: bigint;
        totalParticipants: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalStakedAmount: bigint;
        endTime: bigint;
        tierIndex: bigint;
        stakeCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tiers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        minStakeAmount: bigint;
        maxStakeAmount: bigint;
        stakedAmount: bigint;
        userCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;

  getEvent(
    key: "InterestRateUpdated"
  ): TypedContractEvent<
    InterestRateUpdatedEvent.InputTuple,
    InterestRateUpdatedEvent.OutputTuple,
    InterestRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardAdded"
  ): TypedContractEvent<
    RewardAddedEvent.InputTuple,
    RewardAddedEvent.OutputTuple,
    RewardAddedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StakePausedUpdated"
  ): TypedContractEvent<
    StakePausedUpdatedEvent.InputTuple,
    StakePausedUpdatedEvent.OutputTuple,
    StakePausedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;

  filters: {
    "InterestRateUpdated(uint256)": TypedContractEvent<
      InterestRateUpdatedEvent.InputTuple,
      InterestRateUpdatedEvent.OutputTuple,
      InterestRateUpdatedEvent.OutputObject
    >;
    InterestRateUpdated: TypedContractEvent<
      InterestRateUpdatedEvent.InputTuple,
      InterestRateUpdatedEvent.OutputTuple,
      InterestRateUpdatedEvent.OutputObject
    >;

    "RewardAdded(address,uint256,uint256,uint256)": TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;
    RewardAdded: TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StakePausedUpdated(bool)": TypedContractEvent<
      StakePausedUpdatedEvent.InputTuple,
      StakePausedUpdatedEvent.OutputTuple,
      StakePausedUpdatedEvent.OutputObject
    >;
    StakePausedUpdated: TypedContractEvent<
      StakePausedUpdatedEvent.InputTuple,
      StakePausedUpdatedEvent.OutputTuple,
      StakePausedUpdatedEvent.OutputObject
    >;

    "Staked(address,uint256,tuple,tuple[],uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unstaked(address,uint256,uint256,tuple,tuple[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
  };
}
