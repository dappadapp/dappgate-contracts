/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDappadStakeControllerFactory {
  export type StakeControllerFactoryParamsStruct = {
    adminAddress: AddressLike;
  };

  export type StakeControllerFactoryParamsStructOutput = [
    adminAddress: string
  ] & { adminAddress: string };
}

export declare namespace IDappadStakeController {
  export type StakeControllerDetailsStruct = {
    requiredTokensForNftBonus: BigNumberish;
    bonusEnd: BigNumberish;
    addBonusPerNft: boolean;
    bonusesPerNft: BigNumberish[];
    stakeContractPointMultipliers: BigNumberish[];
  };

  export type StakeControllerDetailsStructOutput = [
    requiredTokensForNftBonus: bigint,
    bonusEnd: bigint,
    addBonusPerNft: boolean,
    bonusesPerNft: bigint[],
    stakeContractPointMultipliers: bigint[]
  ] & {
    requiredTokensForNftBonus: bigint;
    bonusEnd: bigint;
    addBonusPerNft: boolean;
    bonusesPerNft: bigint[];
    stakeContractPointMultipliers: bigint[];
  };

  export type StakeControllerAddressesStruct = {
    tokenAddress: AddressLike;
    ownerAddress: AddressLike;
    adminAddress: AddressLike;
    nftContractAddresses: AddressLike[];
    stakeContractAddresses: AddressLike[];
    bonusVestingContractAddresses: AddressLike[];
  };

  export type StakeControllerAddressesStructOutput = [
    tokenAddress: string,
    ownerAddress: string,
    adminAddress: string,
    nftContractAddresses: string[],
    stakeContractAddresses: string[],
    bonusVestingContractAddresses: string[]
  ] & {
    tokenAddress: string;
    ownerAddress: string;
    adminAddress: string;
    nftContractAddresses: string[];
    stakeContractAddresses: string[];
    bonusVestingContractAddresses: string[];
  };

  export type StakeControllerTierStruct = { requiredStakePoints: BigNumberish };

  export type StakeControllerTierStructOutput = [
    requiredStakePoints: bigint
  ] & { requiredStakePoints: bigint };

  export type StakeControllerParamsStruct = {
    stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStruct;
    stakeControllerAddresses: IDappadStakeController.StakeControllerAddressesStruct;
    stakeControllerTiers: IDappadStakeController.StakeControllerTierStruct[];
  };

  export type StakeControllerParamsStructOutput = [
    stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStructOutput,
    stakeControllerAddresses: IDappadStakeController.StakeControllerAddressesStructOutput,
    stakeControllerTiers: IDappadStakeController.StakeControllerTierStructOutput[]
  ] & {
    stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStructOutput;
    stakeControllerAddresses: IDappadStakeController.StakeControllerAddressesStructOutput;
    stakeControllerTiers: IDappadStakeController.StakeControllerTierStructOutput[];
  };
}

export interface DappadStakeControllerFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "allStakeControllers"
      | "createStakeController"
      | "getRoleAdmin"
      | "getStakeController"
      | "getStakeControllerCount"
      | "grantRole"
      | "hasRole"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StakeControllerCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allStakeControllers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createStakeController",
    values: [IDappadStakeController.StakeControllerParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeController",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeControllerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allStakeControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStakeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeControllerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeControllerCreatedEvent {
  export type InputTuple = [
    stakeControllerAddress: AddressLike,
    stakeControllerParams: IDappadStakeController.StakeControllerParamsStruct,
    createdAt: BigNumberish
  ];
  export type OutputTuple = [
    stakeControllerAddress: string,
    stakeControllerParams: IDappadStakeController.StakeControllerParamsStructOutput,
    createdAt: bigint
  ];
  export interface OutputObject {
    stakeControllerAddress: string;
    stakeControllerParams: IDappadStakeController.StakeControllerParamsStructOutput;
    createdAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DappadStakeControllerFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DappadStakeControllerFactory;
  waitForDeployment(): Promise<this>;

  interface: DappadStakeControllerFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  allStakeControllers: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  createStakeController: TypedContractMethod<
    [
      _stakeControllerParams: IDappadStakeController.StakeControllerParamsStruct
    ],
    [boolean],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStakeController: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getStakeControllerCount: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allStakeControllers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createStakeController"
  ): TypedContractMethod<
    [
      _stakeControllerParams: IDappadStakeController.StakeControllerParamsStruct
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStakeController"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getStakeControllerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StakeControllerCreated"
  ): TypedContractEvent<
    StakeControllerCreatedEvent.InputTuple,
    StakeControllerCreatedEvent.OutputTuple,
    StakeControllerCreatedEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StakeControllerCreated(address,tuple,uint256)": TypedContractEvent<
      StakeControllerCreatedEvent.InputTuple,
      StakeControllerCreatedEvent.OutputTuple,
      StakeControllerCreatedEvent.OutputObject
    >;
    StakeControllerCreated: TypedContractEvent<
      StakeControllerCreatedEvent.InputTuple,
      StakeControllerCreatedEvent.OutputTuple,
      StakeControllerCreatedEvent.OutputObject
    >;
  };
}
