/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDappadStakeController {
  export type StakeControllerDetailsStruct = {
    requiredTokensForNftBonus: BigNumberish;
    bonusEnd: BigNumberish;
    addBonusPerNft: boolean;
    bonusesPerNft: BigNumberish[];
    stakeContractPointMultipliers: BigNumberish[];
  };

  export type StakeControllerDetailsStructOutput = [
    requiredTokensForNftBonus: bigint,
    bonusEnd: bigint,
    addBonusPerNft: boolean,
    bonusesPerNft: bigint[],
    stakeContractPointMultipliers: bigint[]
  ] & {
    requiredTokensForNftBonus: bigint;
    bonusEnd: bigint;
    addBonusPerNft: boolean;
    bonusesPerNft: bigint[];
    stakeContractPointMultipliers: bigint[];
  };

  export type StakeControllerAddressesStruct = {
    tokenAddress: AddressLike;
    ownerAddress: AddressLike;
    adminAddress: AddressLike;
    nftContractAddresses: AddressLike[];
    stakeContractAddresses: AddressLike[];
    bonusVestingContractAddresses: AddressLike[];
  };

  export type StakeControllerAddressesStructOutput = [
    tokenAddress: string,
    ownerAddress: string,
    adminAddress: string,
    nftContractAddresses: string[],
    stakeContractAddresses: string[],
    bonusVestingContractAddresses: string[]
  ] & {
    tokenAddress: string;
    ownerAddress: string;
    adminAddress: string;
    nftContractAddresses: string[];
    stakeContractAddresses: string[];
    bonusVestingContractAddresses: string[];
  };

  export type StakeControllerTierStruct = { requiredStakePoints: BigNumberish };

  export type StakeControllerTierStructOutput = [
    requiredStakePoints: bigint
  ] & { requiredStakePoints: bigint };

  export type StakeControllerParamsStruct = {
    stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStruct;
    stakeControllerAddresses: IDappadStakeController.StakeControllerAddressesStruct;
    stakeControllerTiers: IDappadStakeController.StakeControllerTierStruct[];
  };

  export type StakeControllerParamsStructOutput = [
    stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStructOutput,
    stakeControllerAddresses: IDappadStakeController.StakeControllerAddressesStructOutput,
    stakeControllerTiers: IDappadStakeController.StakeControllerTierStructOutput[]
  ] & {
    stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStructOutput;
    stakeControllerAddresses: IDappadStakeController.StakeControllerAddressesStructOutput;
    stakeControllerTiers: IDappadStakeController.StakeControllerTierStructOutput[];
  };
}

export interface DappadStakeControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "bonusVestingContracts"
      | "calculateBonusPoints"
      | "calculateUserTierIndex"
      | "customBonuses"
      | "getRoleAdmin"
      | "getStakeControllerTier"
      | "getTierCount"
      | "getTotalHarvestedRewardAmount"
      | "getTotalParticipants"
      | "getTotalStakedAmount"
      | "getUserBonusPoints"
      | "getUserStakePoints"
      | "getUserTierIndex"
      | "grantRole"
      | "hasRole"
      | "nftContracts"
      | "renounceRole"
      | "revokeRole"
      | "setBonusVestingContracts"
      | "setCustomBonus"
      | "setCustomBonuses"
      | "setNftBonusPointMultipliers"
      | "setNftContracts"
      | "setStakeContractPointMultipliers"
      | "setStakeContracts"
      | "setStakeControllerDetails"
      | "setTier"
      | "setTiers"
      | "setTokenAddress"
      | "stakeContracts"
      | "stakeControllerAddresses"
      | "stakeControllerDetails"
      | "stakeControllerTiers"
      | "supportsInterface"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BonusVestingContractsUpdated"
      | "CustomBonusUpdated"
      | "CustomBonusesUpdated"
      | "NftBonusPointMultipliersUpdated"
      | "NftContractsUpdated"
      | "OSVestingContractUpdated"
      | "PSVestingContractUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StakeContractPointMultipliersUpdated"
      | "StakeContractsUpdated"
      | "StakeControllerDetailsUpdated"
      | "StakeControllerTierUpdated"
      | "StakeControllerTiersUpdated"
      | "TokenAddressUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonusVestingContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBonusPoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUserTierIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customBonuses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeControllerTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalHarvestedRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBonusPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakePoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTierIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonusVestingContracts",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomBonus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomBonuses",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftBonusPointMultipliers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftContracts",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeContractPointMultipliers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeContracts",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeControllerDetails",
    values: [IDappadStakeController.StakeControllerDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTier",
    values: [BigNumberish, IDappadStakeController.StakeControllerTierStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTiers",
    values: [IDappadStakeController.StakeControllerTierStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeControllerAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeControllerDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeControllerTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusVestingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBonusPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUserTierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customBonuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeControllerTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalHarvestedRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBonusPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBonusVestingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomBonuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftBonusPointMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeContractPointMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeControllerDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeControllerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeControllerDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeControllerTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace BonusVestingContractsUpdatedEvent {
  export type InputTuple = [_bonusVestingContractAddresses: AddressLike[]];
  export type OutputTuple = [_bonusVestingContractAddresses: string[]];
  export interface OutputObject {
    _bonusVestingContractAddresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustomBonusUpdatedEvent {
  export type InputTuple = [
    _userAddress: AddressLike,
    _customBonus: BigNumberish
  ];
  export type OutputTuple = [_userAddress: string, _customBonus: bigint];
  export interface OutputObject {
    _userAddress: string;
    _customBonus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustomBonusesUpdatedEvent {
  export type InputTuple = [
    _userAddresses: AddressLike[],
    _customBonuses: BigNumberish[]
  ];
  export type OutputTuple = [
    _userAddresses: string[],
    _customBonuses: bigint[]
  ];
  export interface OutputObject {
    _userAddresses: string[];
    _customBonuses: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NftBonusPointMultipliersUpdatedEvent {
  export type InputTuple = [_nftBonusPointMultipliers: BigNumberish[]];
  export type OutputTuple = [_nftBonusPointMultipliers: bigint[]];
  export interface OutputObject {
    _nftBonusPointMultipliers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NftContractsUpdatedEvent {
  export type InputTuple = [_nftContractAddresses: AddressLike[]];
  export type OutputTuple = [_nftContractAddresses: string[]];
  export interface OutputObject {
    _nftContractAddresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OSVestingContractUpdatedEvent {
  export type InputTuple = [osVestingContractAddress: AddressLike];
  export type OutputTuple = [osVestingContractAddress: string];
  export interface OutputObject {
    osVestingContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PSVestingContractUpdatedEvent {
  export type InputTuple = [psVestingContractAddress: AddressLike];
  export type OutputTuple = [psVestingContractAddress: string];
  export interface OutputObject {
    psVestingContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeContractPointMultipliersUpdatedEvent {
  export type InputTuple = [_stakeContractPointMultipliers: BigNumberish[]];
  export type OutputTuple = [_stakeContractPointMultipliers: bigint[]];
  export interface OutputObject {
    _stakeContractPointMultipliers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeContractsUpdatedEvent {
  export type InputTuple = [_stakeContractAddresses: AddressLike[]];
  export type OutputTuple = [_stakeContractAddresses: string[]];
  export interface OutputObject {
    _stakeContractAddresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeControllerDetailsUpdatedEvent {
  export type InputTuple = [
    _stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStruct
  ];
  export type OutputTuple = [
    _stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStructOutput
  ];
  export interface OutputObject {
    _stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeControllerTierUpdatedEvent {
  export type InputTuple = [
    _tierIndex: BigNumberish,
    _stakeControllerTier: IDappadStakeController.StakeControllerTierStruct
  ];
  export type OutputTuple = [
    _tierIndex: bigint,
    _stakeControllerTier: IDappadStakeController.StakeControllerTierStructOutput
  ];
  export interface OutputObject {
    _tierIndex: bigint;
    _stakeControllerTier: IDappadStakeController.StakeControllerTierStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeControllerTiersUpdatedEvent {
  export type InputTuple = [
    _stakeControllerTiers: IDappadStakeController.StakeControllerTierStruct[],
    _tierCount: BigNumberish
  ];
  export type OutputTuple = [
    _stakeControllerTiers: IDappadStakeController.StakeControllerTierStructOutput[],
    _tierCount: bigint
  ];
  export interface OutputObject {
    _stakeControllerTiers: IDappadStakeController.StakeControllerTierStructOutput[];
    _tierCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddressUpdatedEvent {
  export type InputTuple = [_tokenAddress: AddressLike];
  export type OutputTuple = [_tokenAddress: string];
  export interface OutputObject {
    _tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DappadStakeController extends BaseContract {
  connect(runner?: ContractRunner | null): DappadStakeController;
  waitForDeployment(): Promise<this>;

  interface: DappadStakeControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  bonusVestingContracts: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  calculateBonusPoints: TypedContractMethod<
    [userAddress: AddressLike, _userStakedAmount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateUserTierIndex: TypedContractMethod<
    [userAddress: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  customBonuses: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStakeControllerTier: TypedContractMethod<
    [_tierIndex: BigNumberish],
    [IDappadStakeController.StakeControllerTierStructOutput],
    "view"
  >;

  getTierCount: TypedContractMethod<[], [bigint], "view">;

  getTotalHarvestedRewardAmount: TypedContractMethod<[], [bigint], "view">;

  getTotalParticipants: TypedContractMethod<[], [bigint], "view">;

  getTotalStakedAmount: TypedContractMethod<[], [bigint], "view">;

  getUserBonusPoints: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserStakePoints: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserTierIndex: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  nftContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setBonusVestingContracts: TypedContractMethod<
    [_bonusVestingContractAddresses: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  setCustomBonus: TypedContractMethod<
    [_userAddress: AddressLike, _customBonus: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setCustomBonuses: TypedContractMethod<
    [_userAddresses: AddressLike[], _customBonuses: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;

  setNftBonusPointMultipliers: TypedContractMethod<
    [_bonusesPerNft: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;

  setNftContracts: TypedContractMethod<
    [_nftContractAddresses: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  setStakeContractPointMultipliers: TypedContractMethod<
    [_stakeContractPointMultipliers: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;

  setStakeContracts: TypedContractMethod<
    [_stakeContractAddresses: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  setStakeControllerDetails: TypedContractMethod<
    [
      _stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStruct
    ],
    [boolean],
    "nonpayable"
  >;

  setTier: TypedContractMethod<
    [
      _tierIndex: BigNumberish,
      _tier: IDappadStakeController.StakeControllerTierStruct
    ],
    [boolean],
    "nonpayable"
  >;

  setTiers: TypedContractMethod<
    [_stakeControllerTiers: IDappadStakeController.StakeControllerTierStruct[]],
    [boolean],
    "nonpayable"
  >;

  setTokenAddress: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  stakeContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  stakeControllerAddresses: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        tokenAddress: string;
        ownerAddress: string;
        adminAddress: string;
      }
    ],
    "view"
  >;

  stakeControllerDetails: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        requiredTokensForNftBonus: bigint;
        bonusEnd: bigint;
        addBonusPerNft: boolean;
      }
    ],
    "view"
  >;

  stakeControllerTiers: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bonusVestingContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "calculateBonusPoints"
  ): TypedContractMethod<
    [userAddress: AddressLike, _userStakedAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateUserTierIndex"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "customBonuses"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStakeControllerTier"
  ): TypedContractMethod<
    [_tierIndex: BigNumberish],
    [IDappadStakeController.StakeControllerTierStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTierCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalHarvestedRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalParticipants"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalStakedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBonusPoints"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStakePoints"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTierIndex"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBonusVestingContracts"
  ): TypedContractMethod<
    [_bonusVestingContractAddresses: AddressLike[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCustomBonus"
  ): TypedContractMethod<
    [_userAddress: AddressLike, _customBonus: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCustomBonuses"
  ): TypedContractMethod<
    [_userAddresses: AddressLike[], _customBonuses: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNftBonusPointMultipliers"
  ): TypedContractMethod<
    [_bonusesPerNft: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNftContracts"
  ): TypedContractMethod<
    [_nftContractAddresses: AddressLike[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStakeContractPointMultipliers"
  ): TypedContractMethod<
    [_stakeContractPointMultipliers: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStakeContracts"
  ): TypedContractMethod<
    [_stakeContractAddresses: AddressLike[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStakeControllerDetails"
  ): TypedContractMethod<
    [
      _stakeControllerDetails: IDappadStakeController.StakeControllerDetailsStruct
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTier"
  ): TypedContractMethod<
    [
      _tierIndex: BigNumberish,
      _tier: IDappadStakeController.StakeControllerTierStruct
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTiers"
  ): TypedContractMethod<
    [_stakeControllerTiers: IDappadStakeController.StakeControllerTierStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAddress"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "stakeControllerAddresses"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        tokenAddress: string;
        ownerAddress: string;
        adminAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakeControllerDetails"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        requiredTokensForNftBonus: bigint;
        bonusEnd: bigint;
        addBonusPerNft: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakeControllerTiers"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BonusVestingContractsUpdated"
  ): TypedContractEvent<
    BonusVestingContractsUpdatedEvent.InputTuple,
    BonusVestingContractsUpdatedEvent.OutputTuple,
    BonusVestingContractsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CustomBonusUpdated"
  ): TypedContractEvent<
    CustomBonusUpdatedEvent.InputTuple,
    CustomBonusUpdatedEvent.OutputTuple,
    CustomBonusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CustomBonusesUpdated"
  ): TypedContractEvent<
    CustomBonusesUpdatedEvent.InputTuple,
    CustomBonusesUpdatedEvent.OutputTuple,
    CustomBonusesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NftBonusPointMultipliersUpdated"
  ): TypedContractEvent<
    NftBonusPointMultipliersUpdatedEvent.InputTuple,
    NftBonusPointMultipliersUpdatedEvent.OutputTuple,
    NftBonusPointMultipliersUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NftContractsUpdated"
  ): TypedContractEvent<
    NftContractsUpdatedEvent.InputTuple,
    NftContractsUpdatedEvent.OutputTuple,
    NftContractsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OSVestingContractUpdated"
  ): TypedContractEvent<
    OSVestingContractUpdatedEvent.InputTuple,
    OSVestingContractUpdatedEvent.OutputTuple,
    OSVestingContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PSVestingContractUpdated"
  ): TypedContractEvent<
    PSVestingContractUpdatedEvent.InputTuple,
    PSVestingContractUpdatedEvent.OutputTuple,
    PSVestingContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StakeContractPointMultipliersUpdated"
  ): TypedContractEvent<
    StakeContractPointMultipliersUpdatedEvent.InputTuple,
    StakeContractPointMultipliersUpdatedEvent.OutputTuple,
    StakeContractPointMultipliersUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeContractsUpdated"
  ): TypedContractEvent<
    StakeContractsUpdatedEvent.InputTuple,
    StakeContractsUpdatedEvent.OutputTuple,
    StakeContractsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeControllerDetailsUpdated"
  ): TypedContractEvent<
    StakeControllerDetailsUpdatedEvent.InputTuple,
    StakeControllerDetailsUpdatedEvent.OutputTuple,
    StakeControllerDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeControllerTierUpdated"
  ): TypedContractEvent<
    StakeControllerTierUpdatedEvent.InputTuple,
    StakeControllerTierUpdatedEvent.OutputTuple,
    StakeControllerTierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeControllerTiersUpdated"
  ): TypedContractEvent<
    StakeControllerTiersUpdatedEvent.InputTuple,
    StakeControllerTiersUpdatedEvent.OutputTuple,
    StakeControllerTiersUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAddressUpdated"
  ): TypedContractEvent<
    TokenAddressUpdatedEvent.InputTuple,
    TokenAddressUpdatedEvent.OutputTuple,
    TokenAddressUpdatedEvent.OutputObject
  >;

  filters: {
    "BonusVestingContractsUpdated(address[])": TypedContractEvent<
      BonusVestingContractsUpdatedEvent.InputTuple,
      BonusVestingContractsUpdatedEvent.OutputTuple,
      BonusVestingContractsUpdatedEvent.OutputObject
    >;
    BonusVestingContractsUpdated: TypedContractEvent<
      BonusVestingContractsUpdatedEvent.InputTuple,
      BonusVestingContractsUpdatedEvent.OutputTuple,
      BonusVestingContractsUpdatedEvent.OutputObject
    >;

    "CustomBonusUpdated(address,uint256)": TypedContractEvent<
      CustomBonusUpdatedEvent.InputTuple,
      CustomBonusUpdatedEvent.OutputTuple,
      CustomBonusUpdatedEvent.OutputObject
    >;
    CustomBonusUpdated: TypedContractEvent<
      CustomBonusUpdatedEvent.InputTuple,
      CustomBonusUpdatedEvent.OutputTuple,
      CustomBonusUpdatedEvent.OutputObject
    >;

    "CustomBonusesUpdated(address[],uint256[])": TypedContractEvent<
      CustomBonusesUpdatedEvent.InputTuple,
      CustomBonusesUpdatedEvent.OutputTuple,
      CustomBonusesUpdatedEvent.OutputObject
    >;
    CustomBonusesUpdated: TypedContractEvent<
      CustomBonusesUpdatedEvent.InputTuple,
      CustomBonusesUpdatedEvent.OutputTuple,
      CustomBonusesUpdatedEvent.OutputObject
    >;

    "NftBonusPointMultipliersUpdated(uint256[])": TypedContractEvent<
      NftBonusPointMultipliersUpdatedEvent.InputTuple,
      NftBonusPointMultipliersUpdatedEvent.OutputTuple,
      NftBonusPointMultipliersUpdatedEvent.OutputObject
    >;
    NftBonusPointMultipliersUpdated: TypedContractEvent<
      NftBonusPointMultipliersUpdatedEvent.InputTuple,
      NftBonusPointMultipliersUpdatedEvent.OutputTuple,
      NftBonusPointMultipliersUpdatedEvent.OutputObject
    >;

    "NftContractsUpdated(address[])": TypedContractEvent<
      NftContractsUpdatedEvent.InputTuple,
      NftContractsUpdatedEvent.OutputTuple,
      NftContractsUpdatedEvent.OutputObject
    >;
    NftContractsUpdated: TypedContractEvent<
      NftContractsUpdatedEvent.InputTuple,
      NftContractsUpdatedEvent.OutputTuple,
      NftContractsUpdatedEvent.OutputObject
    >;

    "OSVestingContractUpdated(address)": TypedContractEvent<
      OSVestingContractUpdatedEvent.InputTuple,
      OSVestingContractUpdatedEvent.OutputTuple,
      OSVestingContractUpdatedEvent.OutputObject
    >;
    OSVestingContractUpdated: TypedContractEvent<
      OSVestingContractUpdatedEvent.InputTuple,
      OSVestingContractUpdatedEvent.OutputTuple,
      OSVestingContractUpdatedEvent.OutputObject
    >;

    "PSVestingContractUpdated(address)": TypedContractEvent<
      PSVestingContractUpdatedEvent.InputTuple,
      PSVestingContractUpdatedEvent.OutputTuple,
      PSVestingContractUpdatedEvent.OutputObject
    >;
    PSVestingContractUpdated: TypedContractEvent<
      PSVestingContractUpdatedEvent.InputTuple,
      PSVestingContractUpdatedEvent.OutputTuple,
      PSVestingContractUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StakeContractPointMultipliersUpdated(uint256[])": TypedContractEvent<
      StakeContractPointMultipliersUpdatedEvent.InputTuple,
      StakeContractPointMultipliersUpdatedEvent.OutputTuple,
      StakeContractPointMultipliersUpdatedEvent.OutputObject
    >;
    StakeContractPointMultipliersUpdated: TypedContractEvent<
      StakeContractPointMultipliersUpdatedEvent.InputTuple,
      StakeContractPointMultipliersUpdatedEvent.OutputTuple,
      StakeContractPointMultipliersUpdatedEvent.OutputObject
    >;

    "StakeContractsUpdated(address[])": TypedContractEvent<
      StakeContractsUpdatedEvent.InputTuple,
      StakeContractsUpdatedEvent.OutputTuple,
      StakeContractsUpdatedEvent.OutputObject
    >;
    StakeContractsUpdated: TypedContractEvent<
      StakeContractsUpdatedEvent.InputTuple,
      StakeContractsUpdatedEvent.OutputTuple,
      StakeContractsUpdatedEvent.OutputObject
    >;

    "StakeControllerDetailsUpdated(tuple)": TypedContractEvent<
      StakeControllerDetailsUpdatedEvent.InputTuple,
      StakeControllerDetailsUpdatedEvent.OutputTuple,
      StakeControllerDetailsUpdatedEvent.OutputObject
    >;
    StakeControllerDetailsUpdated: TypedContractEvent<
      StakeControllerDetailsUpdatedEvent.InputTuple,
      StakeControllerDetailsUpdatedEvent.OutputTuple,
      StakeControllerDetailsUpdatedEvent.OutputObject
    >;

    "StakeControllerTierUpdated(uint256,tuple)": TypedContractEvent<
      StakeControllerTierUpdatedEvent.InputTuple,
      StakeControllerTierUpdatedEvent.OutputTuple,
      StakeControllerTierUpdatedEvent.OutputObject
    >;
    StakeControllerTierUpdated: TypedContractEvent<
      StakeControllerTierUpdatedEvent.InputTuple,
      StakeControllerTierUpdatedEvent.OutputTuple,
      StakeControllerTierUpdatedEvent.OutputObject
    >;

    "StakeControllerTiersUpdated(tuple[],uint256)": TypedContractEvent<
      StakeControllerTiersUpdatedEvent.InputTuple,
      StakeControllerTiersUpdatedEvent.OutputTuple,
      StakeControllerTiersUpdatedEvent.OutputObject
    >;
    StakeControllerTiersUpdated: TypedContractEvent<
      StakeControllerTiersUpdatedEvent.InputTuple,
      StakeControllerTiersUpdatedEvent.OutputTuple,
      StakeControllerTiersUpdatedEvent.OutputObject
    >;

    "TokenAddressUpdated(address)": TypedContractEvent<
      TokenAddressUpdatedEvent.InputTuple,
      TokenAddressUpdatedEvent.OutputTuple,
      TokenAddressUpdatedEvent.OutputObject
    >;
    TokenAddressUpdated: TypedContractEvent<
      TokenAddressUpdatedEvent.InputTuple,
      TokenAddressUpdatedEvent.OutputTuple,
      TokenAddressUpdatedEvent.OutputObject
    >;
  };
}
