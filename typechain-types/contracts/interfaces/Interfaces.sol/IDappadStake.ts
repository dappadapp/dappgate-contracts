/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDappadStake {
  export type StakeStatisticsStruct = {
    rewardBalance: BigNumberish;
    totalStakedAmount: BigNumberish;
    totalHarvestedRewardAmount: BigNumberish;
    totalParticipants: BigNumberish;
  };

  export type StakeStatisticsStructOutput = [
    rewardBalance: bigint,
    totalStakedAmount: bigint,
    totalHarvestedRewardAmount: bigint,
    totalParticipants: bigint
  ] & {
    rewardBalance: bigint;
    totalStakedAmount: bigint;
    totalHarvestedRewardAmount: bigint;
    totalParticipants: bigint;
  };

  export type StakeFeaturesStruct = {
    interestRate: BigNumberish;
    stakeTime: BigNumberish;
    stakedAmount: BigNumberish;
  };

  export type StakeFeaturesStructOutput = [
    interestRate: bigint,
    stakeTime: bigint,
    stakedAmount: bigint
  ] & { interestRate: bigint; stakeTime: bigint; stakedAmount: bigint };

  export type StakeStruct = {
    endTime: BigNumberish;
    totalStakedAmount: BigNumberish;
    totalStakePoints: BigNumberish;
    stakeCount: BigNumberish;
    stakeFeatures: IDappadStake.StakeFeaturesStruct[];
  };

  export type StakeStructOutput = [
    endTime: bigint,
    totalStakedAmount: bigint,
    totalStakePoints: bigint,
    stakeCount: bigint,
    stakeFeatures: IDappadStake.StakeFeaturesStructOutput[]
  ] & {
    endTime: bigint;
    totalStakedAmount: bigint;
    totalStakePoints: bigint;
    stakeCount: bigint;
    stakeFeatures: IDappadStake.StakeFeaturesStructOutput[];
  };
}

export interface IDappadStakeInterface extends Interface {
  getFunction(
    nameOrSignature: "getStakeStatistics" | "getUserStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getStakeStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getStakeStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
}

export interface IDappadStake extends BaseContract {
  connect(runner?: ContractRunner | null): IDappadStake;
  waitForDeployment(): Promise<this>;

  interface: IDappadStakeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getStakeStatistics: TypedContractMethod<
    [],
    [IDappadStake.StakeStatisticsStructOutput],
    "view"
  >;

  getUserStake: TypedContractMethod<
    [userAddress: AddressLike],
    [IDappadStake.StakeStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getStakeStatistics"
  ): TypedContractMethod<
    [],
    [IDappadStake.StakeStatisticsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStake"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [IDappadStake.StakeStructOutput],
    "view"
  >;

  filters: {};
}
