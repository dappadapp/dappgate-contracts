/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDappadVesting {
  export type VestingStruct = {
    vestingCount: BigNumberish;
    vestingDuration: BigNumberish;
    vestingCliffDuration: BigNumberish;
    vestingPercentages: BigNumberish[];
    onTGE: boolean;
  };

  export type VestingStructOutput = [
    vestingCount: bigint,
    vestingDuration: bigint,
    vestingCliffDuration: bigint,
    vestingPercentages: bigint[],
    onTGE: boolean
  ] & {
    vestingCount: bigint;
    vestingDuration: bigint;
    vestingCliffDuration: bigint;
    vestingPercentages: bigint[];
    onTGE: boolean;
  };

  export type VestingAddressesStruct = {
    saleTokenAddress: AddressLike;
    factoryContractAddress: AddressLike;
    saleContractAddress: AddressLike;
    ownerAddress: AddressLike;
    adminAddress: AddressLike;
  };

  export type VestingAddressesStructOutput = [
    saleTokenAddress: string,
    factoryContractAddress: string,
    saleContractAddress: string,
    ownerAddress: string,
    adminAddress: string
  ] & {
    saleTokenAddress: string;
    factoryContractAddress: string;
    saleContractAddress: string;
    ownerAddress: string;
    adminAddress: string;
  };

  export type VestingSettingsStruct = {
    startDate: BigNumberish;
    saleTokenPrice: BigNumberish;
  };

  export type VestingSettingsStructOutput = [
    startDate: bigint,
    saleTokenPrice: bigint
  ] & { startDate: bigint; saleTokenPrice: bigint };

  export type VestingParamsStruct = {
    defaultVesting: IDappadVesting.VestingStruct;
    vestingAddresses: IDappadVesting.VestingAddressesStruct;
    vestingSettings: IDappadVesting.VestingSettingsStruct;
  };

  export type VestingParamsStructOutput = [
    defaultVesting: IDappadVesting.VestingStructOutput,
    vestingAddresses: IDappadVesting.VestingAddressesStructOutput,
    vestingSettings: IDappadVesting.VestingSettingsStructOutput
  ] & {
    defaultVesting: IDappadVesting.VestingStructOutput;
    vestingAddresses: IDappadVesting.VestingAddressesStructOutput;
    vestingSettings: IDappadVesting.VestingSettingsStructOutput;
  };
}

export interface DappadVestingONFTHoldersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "addSaleToken"
      | "calculateSaleTokenAmount"
      | "claimAllUnlockedVestings"
      | "claimVesting"
      | "customVestings"
      | "defaultVesting"
      | "emergencyOnly"
      | "getAnyVestingClaimed"
      | "getCustomVestingPercentages"
      | "getDefaultVestingPercentages"
      | "getFactoryContractAddress"
      | "getNextUnlockDate"
      | "getRoleAdmin"
      | "getSaleTokenAddress"
      | "getTotalVestingAmount"
      | "getUserLockedTokenAmount"
      | "getUserNextVestingIndex"
      | "getUserTotalVestingAmount"
      | "getUserUnclaimedTokenAmount"
      | "getUserUnlockedTokenAmount"
      | "getVestingClaimable"
      | "getVestingClaimed"
      | "grantRole"
      | "hasRole"
      | "investmentAmounts"
      | "renounceRole"
      | "revokeRole"
      | "saleContractCount"
      | "saleContracts"
      | "saleToken"
      | "setCustomVesting"
      | "setCustomVestings"
      | "setDefaultVesting"
      | "setTotalSaleTokenAmount"
      | "setTotalVestingAmount"
      | "setUserInvestmentAmount"
      | "setUserInvestmentAmounts"
      | "setVestingAddresses"
      | "supportsInterface"
      | "vestingAddresses"
      | "vestingClaimed"
      | "vestingSettings"
      | "vestingStatistics"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CustomVestingUpdated"
      | "DefaultVestingUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SaleTokenAdded"
      | "TotalSaleTokenAmountUpdated"
      | "TotalVestingAmountUpdated"
      | "UserClaimedAllUnlockedVestings"
      | "UserClaimedVesting"
      | "UserInvestmentAmountUpdated"
      | "UserInvestmentAmountsUpdated"
      | "VestingAddressesUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addSaleToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSaleTokenAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllUnlockedVestings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimVesting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customVestings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOnly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnyVestingClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomVestingPercentages",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultVestingPercentages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUnlockDate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVestingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLockedTokenAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNextVestingIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalVestingAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnclaimedTokenAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnlockedTokenAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingClaimable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingClaimed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentAmounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "saleContractCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "saleToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCustomVesting",
    values: [AddressLike, IDappadVesting.VestingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomVestings",
    values: [AddressLike[], IDappadVesting.VestingStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultVesting",
    values: [IDappadVesting.VestingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalSaleTokenAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalVestingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserInvestmentAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserInvestmentAmounts",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingAddresses",
    values: [IDappadVesting.VestingAddressesStruct, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingClaimed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingStatistics",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSaleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSaleTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllUnlockedVestings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customVestings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnyVestingClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomVestingPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultVestingPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUnlockDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLockedTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNextVestingIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnclaimedTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnlockedTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleContractCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCustomVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomVestings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalSaleTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserInvestmentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserInvestmentAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingStatistics",
    data: BytesLike
  ): Result;
}

export namespace CustomVestingUpdatedEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    vesting: IDappadVesting.VestingStruct,
    vestingPercentages: BigNumberish[]
  ];
  export type OutputTuple = [
    userAddress: string,
    vesting: IDappadVesting.VestingStructOutput,
    vestingPercentages: bigint[]
  ];
  export interface OutputObject {
    userAddress: string;
    vesting: IDappadVesting.VestingStructOutput;
    vestingPercentages: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultVestingUpdatedEvent {
  export type InputTuple = [
    vesting: IDappadVesting.VestingStruct,
    vestingPercentages: BigNumberish[]
  ];
  export type OutputTuple = [
    vesting: IDappadVesting.VestingStructOutput,
    vestingPercentages: bigint[]
  ];
  export interface OutputObject {
    vesting: IDappadVesting.VestingStructOutput;
    vestingPercentages: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleTokenAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    saleAmount: BigNumberish,
    totalSaleTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    saleAmount: bigint,
    totalSaleTokenAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    saleAmount: bigint;
    totalSaleTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TotalSaleTokenAmountUpdatedEvent {
  export type InputTuple = [totalSaleTokenAmount: BigNumberish];
  export type OutputTuple = [totalSaleTokenAmount: bigint];
  export interface OutputObject {
    totalSaleTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TotalVestingAmountUpdatedEvent {
  export type InputTuple = [totalVestingAmount: BigNumberish];
  export type OutputTuple = [totalVestingAmount: bigint];
  export interface OutputObject {
    totalVestingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserClaimedAllUnlockedVestingsEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    amount: BigNumberish,
    saleTokenAmount: BigNumberish,
    totalVestingAmount: BigNumberish,
    claimedTime: BigNumberish
  ];
  export type OutputTuple = [
    userAddress: string,
    amount: bigint,
    saleTokenAmount: bigint,
    totalVestingAmount: bigint,
    claimedTime: bigint
  ];
  export interface OutputObject {
    userAddress: string;
    amount: bigint;
    saleTokenAmount: bigint;
    totalVestingAmount: bigint;
    claimedTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserClaimedVestingEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    vestingIndex: BigNumberish,
    amount: BigNumberish,
    saleTokenAmount: BigNumberish,
    totalVestingAmount: BigNumberish,
    claimedTime: BigNumberish
  ];
  export type OutputTuple = [
    userAddress: string,
    vestingIndex: bigint,
    amount: bigint,
    saleTokenAmount: bigint,
    totalVestingAmount: bigint,
    claimedTime: bigint
  ];
  export interface OutputObject {
    userAddress: string;
    vestingIndex: bigint;
    amount: bigint;
    saleTokenAmount: bigint;
    totalVestingAmount: bigint;
    claimedTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserInvestmentAmountUpdatedEvent {
  export type InputTuple = [userAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [userAddress: string, amount: bigint];
  export interface OutputObject {
    userAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserInvestmentAmountsUpdatedEvent {
  export type InputTuple = [
    userAddresses: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [userAddresses: string[], amounts: bigint[]];
  export interface OutputObject {
    userAddresses: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingAddressesUpdatedEvent {
  export type InputTuple = [
    vestingAddresses: IDappadVesting.VestingAddressesStruct
  ];
  export type OutputTuple = [
    vestingAddresses: IDappadVesting.VestingAddressesStructOutput
  ];
  export interface OutputObject {
    vestingAddresses: IDappadVesting.VestingAddressesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DappadVestingONFTHolders extends BaseContract {
  connect(runner?: ContractRunner | null): DappadVestingONFTHolders;
  waitForDeployment(): Promise<this>;

  interface: DappadVestingONFTHoldersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  addSaleToken: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  calculateSaleTokenAmount: TypedContractMethod<
    [saleTokenPrice: BigNumberish, investmentAmount: BigNumberish],
    [bigint],
    "view"
  >;

  claimAllUnlockedVestings: TypedContractMethod<[], [boolean], "nonpayable">;

  claimVesting: TypedContractMethod<
    [vestingIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  customVestings: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        vestingCount: bigint;
        vestingDuration: bigint;
        vestingCliffDuration: bigint;
        onTGE: boolean;
      }
    ],
    "view"
  >;

  defaultVesting: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        vestingCount: bigint;
        vestingDuration: bigint;
        vestingCliffDuration: bigint;
        onTGE: boolean;
      }
    ],
    "view"
  >;

  emergencyOnly: TypedContractMethod<[], [boolean], "nonpayable">;

  getAnyVestingClaimed: TypedContractMethod<
    [userAddress: AddressLike],
    [boolean],
    "view"
  >;

  getCustomVestingPercentages: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  getDefaultVestingPercentages: TypedContractMethod<[], [bigint[]], "view">;

  getFactoryContractAddress: TypedContractMethod<[], [string], "view">;

  getNextUnlockDate: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSaleTokenAddress: TypedContractMethod<[], [string], "view">;

  getTotalVestingAmount: TypedContractMethod<[], [bigint], "view">;

  getUserLockedTokenAmount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserNextVestingIndex: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserTotalVestingAmount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserUnclaimedTokenAmount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserUnlockedTokenAmount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getVestingClaimable: TypedContractMethod<
    [userAddress: AddressLike, vestingIndex: BigNumberish],
    [boolean],
    "view"
  >;

  getVestingClaimed: TypedContractMethod<
    [userAddress: AddressLike, vestingIndex: BigNumberish],
    [boolean],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  investmentAmounts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  saleContractCount: TypedContractMethod<[], [bigint], "view">;

  saleContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  saleToken: TypedContractMethod<[], [string], "view">;

  setCustomVesting: TypedContractMethod<
    [userAddress: AddressLike, vesting: IDappadVesting.VestingStruct],
    [boolean],
    "nonpayable"
  >;

  setCustomVestings: TypedContractMethod<
    [userAddresses: AddressLike[], vestings: IDappadVesting.VestingStruct[]],
    [boolean],
    "nonpayable"
  >;

  setDefaultVesting: TypedContractMethod<
    [vesting: IDappadVesting.VestingStruct],
    [boolean],
    "nonpayable"
  >;

  setTotalSaleTokenAmount: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setTotalVestingAmount: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setUserInvestmentAmount: TypedContractMethod<
    [userAddress: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setUserInvestmentAmounts: TypedContractMethod<
    [userAddresses: AddressLike[], amounts: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;

  setVestingAddresses: TypedContractMethod<
    [
      newVestingAddresses: IDappadVesting.VestingAddressesStruct,
      saleContractAddresses: AddressLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  vestingAddresses: TypedContractMethod<
    [],
    [
      [string, string, string, string, string] & {
        saleTokenAddress: string;
        factoryContractAddress: string;
        saleContractAddress: string;
        ownerAddress: string;
        adminAddress: string;
      }
    ],
    "view"
  >;

  vestingClaimed: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  vestingSettings: TypedContractMethod<
    [],
    [[bigint, bigint] & { startDate: bigint; saleTokenPrice: bigint }],
    "view"
  >;

  vestingStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalVestingAmount: bigint;
        totalSaleTokenAmount: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addSaleToken"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateSaleTokenAmount"
  ): TypedContractMethod<
    [saleTokenPrice: BigNumberish, investmentAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimAllUnlockedVestings"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "claimVesting"
  ): TypedContractMethod<[vestingIndex: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "customVestings"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        vestingCount: bigint;
        vestingDuration: bigint;
        vestingCliffDuration: bigint;
        onTGE: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "defaultVesting"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        vestingCount: bigint;
        vestingDuration: bigint;
        vestingCliffDuration: bigint;
        onTGE: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyOnly"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getAnyVestingClaimed"
  ): TypedContractMethod<[userAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCustomVestingPercentages"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getDefaultVestingPercentages"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getFactoryContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNextUnlockDate"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSaleTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalVestingAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserLockedTokenAmount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserNextVestingIndex"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalVestingAmount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserUnclaimedTokenAmount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserUnlockedTokenAmount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingClaimable"
  ): TypedContractMethod<
    [userAddress: AddressLike, vestingIndex: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVestingClaimed"
  ): TypedContractMethod<
    [userAddress: AddressLike, vestingIndex: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "investmentAmounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "saleContractCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "saleContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "saleToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCustomVesting"
  ): TypedContractMethod<
    [userAddress: AddressLike, vesting: IDappadVesting.VestingStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCustomVestings"
  ): TypedContractMethod<
    [userAddresses: AddressLike[], vestings: IDappadVesting.VestingStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultVesting"
  ): TypedContractMethod<
    [vesting: IDappadVesting.VestingStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTotalSaleTokenAmount"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalVestingAmount"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserInvestmentAmount"
  ): TypedContractMethod<
    [userAddress: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserInvestmentAmounts"
  ): TypedContractMethod<
    [userAddresses: AddressLike[], amounts: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVestingAddresses"
  ): TypedContractMethod<
    [
      newVestingAddresses: IDappadVesting.VestingAddressesStruct,
      saleContractAddresses: AddressLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "vestingAddresses"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string, string] & {
        saleTokenAddress: string;
        factoryContractAddress: string;
        saleContractAddress: string;
        ownerAddress: string;
        adminAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vestingClaimed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "vestingSettings"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { startDate: bigint; saleTokenPrice: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "vestingStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalVestingAmount: bigint;
        totalSaleTokenAmount: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CustomVestingUpdated"
  ): TypedContractEvent<
    CustomVestingUpdatedEvent.InputTuple,
    CustomVestingUpdatedEvent.OutputTuple,
    CustomVestingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultVestingUpdated"
  ): TypedContractEvent<
    DefaultVestingUpdatedEvent.InputTuple,
    DefaultVestingUpdatedEvent.OutputTuple,
    DefaultVestingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SaleTokenAdded"
  ): TypedContractEvent<
    SaleTokenAddedEvent.InputTuple,
    SaleTokenAddedEvent.OutputTuple,
    SaleTokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "TotalSaleTokenAmountUpdated"
  ): TypedContractEvent<
    TotalSaleTokenAmountUpdatedEvent.InputTuple,
    TotalSaleTokenAmountUpdatedEvent.OutputTuple,
    TotalSaleTokenAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TotalVestingAmountUpdated"
  ): TypedContractEvent<
    TotalVestingAmountUpdatedEvent.InputTuple,
    TotalVestingAmountUpdatedEvent.OutputTuple,
    TotalVestingAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserClaimedAllUnlockedVestings"
  ): TypedContractEvent<
    UserClaimedAllUnlockedVestingsEvent.InputTuple,
    UserClaimedAllUnlockedVestingsEvent.OutputTuple,
    UserClaimedAllUnlockedVestingsEvent.OutputObject
  >;
  getEvent(
    key: "UserClaimedVesting"
  ): TypedContractEvent<
    UserClaimedVestingEvent.InputTuple,
    UserClaimedVestingEvent.OutputTuple,
    UserClaimedVestingEvent.OutputObject
  >;
  getEvent(
    key: "UserInvestmentAmountUpdated"
  ): TypedContractEvent<
    UserInvestmentAmountUpdatedEvent.InputTuple,
    UserInvestmentAmountUpdatedEvent.OutputTuple,
    UserInvestmentAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserInvestmentAmountsUpdated"
  ): TypedContractEvent<
    UserInvestmentAmountsUpdatedEvent.InputTuple,
    UserInvestmentAmountsUpdatedEvent.OutputTuple,
    UserInvestmentAmountsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VestingAddressesUpdated"
  ): TypedContractEvent<
    VestingAddressesUpdatedEvent.InputTuple,
    VestingAddressesUpdatedEvent.OutputTuple,
    VestingAddressesUpdatedEvent.OutputObject
  >;

  filters: {
    "CustomVestingUpdated(address,tuple,uint256[])": TypedContractEvent<
      CustomVestingUpdatedEvent.InputTuple,
      CustomVestingUpdatedEvent.OutputTuple,
      CustomVestingUpdatedEvent.OutputObject
    >;
    CustomVestingUpdated: TypedContractEvent<
      CustomVestingUpdatedEvent.InputTuple,
      CustomVestingUpdatedEvent.OutputTuple,
      CustomVestingUpdatedEvent.OutputObject
    >;

    "DefaultVestingUpdated(tuple,uint256[])": TypedContractEvent<
      DefaultVestingUpdatedEvent.InputTuple,
      DefaultVestingUpdatedEvent.OutputTuple,
      DefaultVestingUpdatedEvent.OutputObject
    >;
    DefaultVestingUpdated: TypedContractEvent<
      DefaultVestingUpdatedEvent.InputTuple,
      DefaultVestingUpdatedEvent.OutputTuple,
      DefaultVestingUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SaleTokenAdded(address,uint256,uint256)": TypedContractEvent<
      SaleTokenAddedEvent.InputTuple,
      SaleTokenAddedEvent.OutputTuple,
      SaleTokenAddedEvent.OutputObject
    >;
    SaleTokenAdded: TypedContractEvent<
      SaleTokenAddedEvent.InputTuple,
      SaleTokenAddedEvent.OutputTuple,
      SaleTokenAddedEvent.OutputObject
    >;

    "TotalSaleTokenAmountUpdated(uint256)": TypedContractEvent<
      TotalSaleTokenAmountUpdatedEvent.InputTuple,
      TotalSaleTokenAmountUpdatedEvent.OutputTuple,
      TotalSaleTokenAmountUpdatedEvent.OutputObject
    >;
    TotalSaleTokenAmountUpdated: TypedContractEvent<
      TotalSaleTokenAmountUpdatedEvent.InputTuple,
      TotalSaleTokenAmountUpdatedEvent.OutputTuple,
      TotalSaleTokenAmountUpdatedEvent.OutputObject
    >;

    "TotalVestingAmountUpdated(uint256)": TypedContractEvent<
      TotalVestingAmountUpdatedEvent.InputTuple,
      TotalVestingAmountUpdatedEvent.OutputTuple,
      TotalVestingAmountUpdatedEvent.OutputObject
    >;
    TotalVestingAmountUpdated: TypedContractEvent<
      TotalVestingAmountUpdatedEvent.InputTuple,
      TotalVestingAmountUpdatedEvent.OutputTuple,
      TotalVestingAmountUpdatedEvent.OutputObject
    >;

    "UserClaimedAllUnlockedVestings(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UserClaimedAllUnlockedVestingsEvent.InputTuple,
      UserClaimedAllUnlockedVestingsEvent.OutputTuple,
      UserClaimedAllUnlockedVestingsEvent.OutputObject
    >;
    UserClaimedAllUnlockedVestings: TypedContractEvent<
      UserClaimedAllUnlockedVestingsEvent.InputTuple,
      UserClaimedAllUnlockedVestingsEvent.OutputTuple,
      UserClaimedAllUnlockedVestingsEvent.OutputObject
    >;

    "UserClaimedVesting(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UserClaimedVestingEvent.InputTuple,
      UserClaimedVestingEvent.OutputTuple,
      UserClaimedVestingEvent.OutputObject
    >;
    UserClaimedVesting: TypedContractEvent<
      UserClaimedVestingEvent.InputTuple,
      UserClaimedVestingEvent.OutputTuple,
      UserClaimedVestingEvent.OutputObject
    >;

    "UserInvestmentAmountUpdated(address,uint256)": TypedContractEvent<
      UserInvestmentAmountUpdatedEvent.InputTuple,
      UserInvestmentAmountUpdatedEvent.OutputTuple,
      UserInvestmentAmountUpdatedEvent.OutputObject
    >;
    UserInvestmentAmountUpdated: TypedContractEvent<
      UserInvestmentAmountUpdatedEvent.InputTuple,
      UserInvestmentAmountUpdatedEvent.OutputTuple,
      UserInvestmentAmountUpdatedEvent.OutputObject
    >;

    "UserInvestmentAmountsUpdated(address[],uint256[])": TypedContractEvent<
      UserInvestmentAmountsUpdatedEvent.InputTuple,
      UserInvestmentAmountsUpdatedEvent.OutputTuple,
      UserInvestmentAmountsUpdatedEvent.OutputObject
    >;
    UserInvestmentAmountsUpdated: TypedContractEvent<
      UserInvestmentAmountsUpdatedEvent.InputTuple,
      UserInvestmentAmountsUpdatedEvent.OutputTuple,
      UserInvestmentAmountsUpdatedEvent.OutputObject
    >;

    "VestingAddressesUpdated(tuple)": TypedContractEvent<
      VestingAddressesUpdatedEvent.InputTuple,
      VestingAddressesUpdatedEvent.OutputTuple,
      VestingAddressesUpdatedEvent.OutputObject
    >;
    VestingAddressesUpdated: TypedContractEvent<
      VestingAddressesUpdatedEvent.InputTuple,
      VestingAddressesUpdatedEvent.OutputTuple,
      VestingAddressesUpdatedEvent.OutputObject
    >;
  };
}
