/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDappadSale {
  export type SaleDetailsStruct = {
    saleStart: BigNumberish;
    saleEnd: BigNumberish;
    saleTokenPrice: BigNumberish;
    maxInvestmentAmount: BigNumberish;
    tierDetailCount: BigNumberish;
    projectOwnerFeePercentage: BigNumberish;
    salePaused: boolean;
    saleName: string;
  };

  export type SaleDetailsStructOutput = [
    saleStart: bigint,
    saleEnd: bigint,
    saleTokenPrice: bigint,
    maxInvestmentAmount: bigint,
    tierDetailCount: bigint,
    projectOwnerFeePercentage: bigint,
    salePaused: boolean,
    saleName: string
  ] & {
    saleStart: bigint;
    saleEnd: bigint;
    saleTokenPrice: bigint;
    maxInvestmentAmount: bigint;
    tierDetailCount: bigint;
    projectOwnerFeePercentage: bigint;
    salePaused: boolean;
    saleName: string;
  };

  export type SaleFcfsDetailsStruct = {
    fcfsSaleDuration: BigNumberish;
    fcfsSaleMultiplier: BigNumberish;
  };

  export type SaleFcfsDetailsStructOutput = [
    fcfsSaleDuration: bigint,
    fcfsSaleMultiplier: bigint
  ] & { fcfsSaleDuration: bigint; fcfsSaleMultiplier: bigint };

  export type SaleRefundDetailsStruct = {
    refundDuration: BigNumberish;
    refundEnabled: boolean;
  };

  export type SaleRefundDetailsStructOutput = [
    refundDuration: bigint,
    refundEnabled: boolean
  ] & { refundDuration: bigint; refundEnabled: boolean };

  export type SaleTicketDetailsStruct = {
    ticketPrice: BigNumberish;
    ticketMerkleRoot: BytesLike;
  };

  export type SaleTicketDetailsStructOutput = [
    ticketPrice: bigint,
    ticketMerkleRoot: string
  ] & { ticketPrice: bigint; ticketMerkleRoot: string };

  export type SaleAddressesStruct = {
    saleTokenAddress: AddressLike;
    investmentTokenAddress: AddressLike;
    factoryContractAddress: AddressLike;
    stakeContractAddress: AddressLike;
    vestingContractAddress: AddressLike;
    ownerAddress: AddressLike;
    adminAddress: AddressLike;
    launchpadFeeAddress: AddressLike;
    projectOwnerFeeAddress: AddressLike;
  };

  export type SaleAddressesStructOutput = [
    saleTokenAddress: string,
    investmentTokenAddress: string,
    factoryContractAddress: string,
    stakeContractAddress: string,
    vestingContractAddress: string,
    ownerAddress: string,
    adminAddress: string,
    launchpadFeeAddress: string,
    projectOwnerFeeAddress: string
  ] & {
    saleTokenAddress: string;
    investmentTokenAddress: string;
    factoryContractAddress: string;
    stakeContractAddress: string;
    vestingContractAddress: string;
    ownerAddress: string;
    adminAddress: string;
    launchpadFeeAddress: string;
    projectOwnerFeeAddress: string;
  };

  export type SaleStruct = {
    saleDetails: IDappadSale.SaleDetailsStruct;
    fcfsDetails: IDappadSale.SaleFcfsDetailsStruct;
    refundDetails: IDappadSale.SaleRefundDetailsStruct;
    ticketDetails: IDappadSale.SaleTicketDetailsStruct;
    saleAddresses: IDappadSale.SaleAddressesStruct;
  };

  export type SaleStructOutput = [
    saleDetails: IDappadSale.SaleDetailsStructOutput,
    fcfsDetails: IDappadSale.SaleFcfsDetailsStructOutput,
    refundDetails: IDappadSale.SaleRefundDetailsStructOutput,
    ticketDetails: IDappadSale.SaleTicketDetailsStructOutput,
    saleAddresses: IDappadSale.SaleAddressesStructOutput
  ] & {
    saleDetails: IDappadSale.SaleDetailsStructOutput;
    fcfsDetails: IDappadSale.SaleFcfsDetailsStructOutput;
    refundDetails: IDappadSale.SaleRefundDetailsStructOutput;
    ticketDetails: IDappadSale.SaleTicketDetailsStructOutput;
    saleAddresses: IDappadSale.SaleAddressesStructOutput;
  };

  export type SaleTierDetailsStruct = {
    minInvestmentAmount: BigNumberish;
    maxInvestmentAmount: BigNumberish;
    investmentAmount: BigNumberish;
    ticketAmount: BigNumberish;
    totalParticipants: BigNumberish;
    whitelistMerkleRoot: BytesLike;
  };

  export type SaleTierDetailsStructOutput = [
    minInvestmentAmount: bigint,
    maxInvestmentAmount: bigint,
    investmentAmount: bigint,
    ticketAmount: bigint,
    totalParticipants: bigint,
    whitelistMerkleRoot: string
  ] & {
    minInvestmentAmount: bigint;
    maxInvestmentAmount: bigint;
    investmentAmount: bigint;
    ticketAmount: bigint;
    totalParticipants: bigint;
    whitelistMerkleRoot: string;
  };

  export type SaleParamsStruct = {
    sale: IDappadSale.SaleStruct;
    tierDetails: IDappadSale.SaleTierDetailsStruct[];
  };

  export type SaleParamsStructOutput = [
    sale: IDappadSale.SaleStructOutput,
    tierDetails: IDappadSale.SaleTierDetailsStructOutput[]
  ] & {
    sale: IDappadSale.SaleStructOutput;
    tierDetails: IDappadSale.SaleTierDetailsStructOutput[];
  };
}

export interface DappadSaleNNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "checkTicketEligibility"
      | "checkWhitelistEligibility"
      | "completeSale"
      | "emergencyOnly"
      | "getAllTierDetails"
      | "getFactoryContractAddress"
      | "getIsSaleActive"
      | "getNftAddress"
      | "getRefundEnabled"
      | "getRoleAdmin"
      | "getSaleEndDate"
      | "getSaleTokenAddress"
      | "getSaleTokenPrice"
      | "getStakeContractAddress"
      | "getTierCount"
      | "getTierDetailsByIndex"
      | "getUserInvestmentAmount"
      | "getUserRefunded"
      | "grantRole"
      | "hasRole"
      | "investmentAmounts"
      | "joinFcfsSale"
      | "joinSale"
      | "joinedNftIdCount"
      | "joinedNftIdCountFcfs"
      | "joinedNftIds"
      | "joinedNftIdsFcfs"
      | "joinedNftIdsFcfsOwner"
      | "joinedNftIdsOwner"
      | "nftContract"
      | "refund"
      | "refunded"
      | "renounceRole"
      | "revokeRole"
      | "sale"
      | "saleStatistics"
      | "setNftContract"
      | "setRefundDetails"
      | "setSaleAddresses"
      | "setSaleDetails"
      | "setSaleFcfsDetails"
      | "setSalePaused"
      | "setStakeContract"
      | "setTicketDetails"
      | "setTierDetails"
      | "setTierDetailsBatch"
      | "setVestingContract"
      | "stakeContract"
      | "supportsInterface"
      | "tierDetails"
      | "totalVestingAmount"
      | "vestingContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NFTContractUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SaleAddressesUpdated"
      | "SaleCompleted"
      | "SaleDetailsUpdated"
      | "SaleFcfsDetailsUpdated"
      | "SalePausedUpdated"
      | "SaleRefundDetailsUpdated"
      | "SaleTicketDetailsUpdated"
      | "SaleTierDetailsBatchUpdated"
      | "SaleTierDetailsUpdated"
      | "StakeContractUpdated"
      | "UserJoinedSale"
      | "UserRefundedSale"
      | "VestingContractUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkTicketEligibility",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWhitelistEligibility",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOnly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTierDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsSaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleEndDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTierCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTierDetailsByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInvestmentAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRefunded",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentAmounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinFcfsSale",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinSale",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinedNftIdCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinedNftIdCountFcfs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinedNftIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinedNftIdsFcfs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinedNftIdsFcfsOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinedNftIdsOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refunded",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNftContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundDetails",
    values: [IDappadSale.SaleRefundDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleAddresses",
    values: [IDappadSale.SaleAddressesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleDetails",
    values: [IDappadSale.SaleDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleFcfsDetails",
    values: [IDappadSale.SaleFcfsDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSalePaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTicketDetails",
    values: [IDappadSale.SaleTicketDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierDetails",
    values: [BigNumberish, IDappadSale.SaleTierDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierDetailsBatch",
    values: [IDappadSale.SaleTierDetailsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tierDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVestingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkTicketEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkWhitelistEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsSaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefundEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierDetailsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInvestmentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinFcfsSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinedNftIdCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinedNftIdCountFcfs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinedNftIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinedNftIdsFcfs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinedNftIdsFcfsOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinedNftIdsOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refunded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleFcfsDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTicketDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTierDetailsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingContract",
    data: BytesLike
  ): Result;
}

export namespace NFTContractUpdatedEvent {
  export type InputTuple = [newNFTContractAddress: AddressLike];
  export type OutputTuple = [newNFTContractAddress: string];
  export interface OutputObject {
    newNFTContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleAddressesUpdatedEvent {
  export type InputTuple = [newSaleAddresses: IDappadSale.SaleAddressesStruct];
  export type OutputTuple = [
    newSaleAddresses: IDappadSale.SaleAddressesStructOutput
  ];
  export interface OutputObject {
    newSaleAddresses: IDappadSale.SaleAddressesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleCompletedEvent {
  export type InputTuple = [
    projectOwnerFeeAddress: AddressLike,
    projectOwnerFeeAmount: BigNumberish,
    launchpadFeeAddress: AddressLike,
    launchpadFeeAmount: BigNumberish
  ];
  export type OutputTuple = [
    projectOwnerFeeAddress: string,
    projectOwnerFeeAmount: bigint,
    launchpadFeeAddress: string,
    launchpadFeeAmount: bigint
  ];
  export interface OutputObject {
    projectOwnerFeeAddress: string;
    projectOwnerFeeAmount: bigint;
    launchpadFeeAddress: string;
    launchpadFeeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleDetailsUpdatedEvent {
  export type InputTuple = [newSaleDetails: IDappadSale.SaleDetailsStruct];
  export type OutputTuple = [
    newSaleDetails: IDappadSale.SaleDetailsStructOutput
  ];
  export interface OutputObject {
    newSaleDetails: IDappadSale.SaleDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleFcfsDetailsUpdatedEvent {
  export type InputTuple = [newFcfsDetails: IDappadSale.SaleFcfsDetailsStruct];
  export type OutputTuple = [
    newFcfsDetails: IDappadSale.SaleFcfsDetailsStructOutput
  ];
  export interface OutputObject {
    newFcfsDetails: IDappadSale.SaleFcfsDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalePausedUpdatedEvent {
  export type InputTuple = [salePaused: boolean];
  export type OutputTuple = [salePaused: boolean];
  export interface OutputObject {
    salePaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleRefundDetailsUpdatedEvent {
  export type InputTuple = [
    newRefundDetails: IDappadSale.SaleRefundDetailsStruct
  ];
  export type OutputTuple = [
    newRefundDetails: IDappadSale.SaleRefundDetailsStructOutput
  ];
  export interface OutputObject {
    newRefundDetails: IDappadSale.SaleRefundDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleTicketDetailsUpdatedEvent {
  export type InputTuple = [
    newTicketDetails: IDappadSale.SaleTicketDetailsStruct
  ];
  export type OutputTuple = [
    newTicketDetails: IDappadSale.SaleTicketDetailsStructOutput
  ];
  export interface OutputObject {
    newTicketDetails: IDappadSale.SaleTicketDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleTierDetailsBatchUpdatedEvent {
  export type InputTuple = [
    newTierDetails: IDappadSale.SaleTierDetailsStruct[]
  ];
  export type OutputTuple = [
    newTierDetails: IDappadSale.SaleTierDetailsStructOutput[]
  ];
  export interface OutputObject {
    newTierDetails: IDappadSale.SaleTierDetailsStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleTierDetailsUpdatedEvent {
  export type InputTuple = [
    tierIndex: BigNumberish,
    newTierDetails: IDappadSale.SaleTierDetailsStruct
  ];
  export type OutputTuple = [
    tierIndex: bigint,
    newTierDetails: IDappadSale.SaleTierDetailsStructOutput
  ];
  export interface OutputObject {
    tierIndex: bigint;
    newTierDetails: IDappadSale.SaleTierDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeContractUpdatedEvent {
  export type InputTuple = [stakeContractAddress: AddressLike];
  export type OutputTuple = [stakeContractAddress: string];
  export interface OutputObject {
    stakeContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserJoinedSaleEvent {
  export type InputTuple = [
    user: AddressLike,
    tierIndex: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, tierIndex: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    tierIndex: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRefundedSaleEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingContractUpdatedEvent {
  export type InputTuple = [vestingContractAddress: AddressLike];
  export type OutputTuple = [vestingContractAddress: string];
  export interface OutputObject {
    vestingContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DappadSaleNNFT extends BaseContract {
  connect(runner?: ContractRunner | null): DappadSaleNNFT;
  waitForDeployment(): Promise<this>;

  interface: DappadSaleNNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  checkTicketEligibility: TypedContractMethod<
    [userAddress: AddressLike, proof: BytesLike[]],
    [boolean],
    "view"
  >;

  checkWhitelistEligibility: TypedContractMethod<
    [userAddress: AddressLike, userTierIndex: BigNumberish, proof: BytesLike[]],
    [boolean],
    "view"
  >;

  completeSale: TypedContractMethod<[], [boolean], "nonpayable">;

  emergencyOnly: TypedContractMethod<[], [boolean], "nonpayable">;

  getAllTierDetails: TypedContractMethod<
    [],
    [IDappadSale.SaleTierDetailsStructOutput[]],
    "view"
  >;

  getFactoryContractAddress: TypedContractMethod<[], [string], "view">;

  getIsSaleActive: TypedContractMethod<[], [boolean], "view">;

  getNftAddress: TypedContractMethod<[], [string], "view">;

  getRefundEnabled: TypedContractMethod<[], [boolean], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSaleEndDate: TypedContractMethod<[], [bigint], "view">;

  getSaleTokenAddress: TypedContractMethod<[], [string], "view">;

  getSaleTokenPrice: TypedContractMethod<[], [bigint], "view">;

  getStakeContractAddress: TypedContractMethod<[], [string], "view">;

  getTierCount: TypedContractMethod<[], [bigint], "view">;

  getTierDetailsByIndex: TypedContractMethod<
    [tierIndex: BigNumberish],
    [IDappadSale.SaleTierDetailsStructOutput],
    "view"
  >;

  getUserInvestmentAmount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserRefunded: TypedContractMethod<
    [userAddress: AddressLike],
    [boolean],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  investmentAmounts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  joinFcfsSale: TypedContractMethod<
    [whitelistProof: BytesLike[]],
    [boolean],
    "payable"
  >;

  joinSale: TypedContractMethod<
    [whitelistProof: BytesLike[], ticketProof: BytesLike[]],
    [boolean],
    "payable"
  >;

  joinedNftIdCount: TypedContractMethod<[], [bigint], "view">;

  joinedNftIdCountFcfs: TypedContractMethod<[], [bigint], "view">;

  joinedNftIds: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  joinedNftIdsFcfs: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  joinedNftIdsFcfsOwner: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  joinedNftIdsOwner: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  nftContract: TypedContractMethod<[], [string], "view">;

  refund: TypedContractMethod<[], [boolean], "nonpayable">;

  refunded: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sale: TypedContractMethod<
    [],
    [
      [
        IDappadSale.SaleDetailsStructOutput,
        IDappadSale.SaleFcfsDetailsStructOutput,
        IDappadSale.SaleRefundDetailsStructOutput,
        IDappadSale.SaleTicketDetailsStructOutput,
        IDappadSale.SaleAddressesStructOutput
      ] & {
        saleDetails: IDappadSale.SaleDetailsStructOutput;
        fcfsDetails: IDappadSale.SaleFcfsDetailsStructOutput;
        refundDetails: IDappadSale.SaleRefundDetailsStructOutput;
        ticketDetails: IDappadSale.SaleTicketDetailsStructOutput;
        saleAddresses: IDappadSale.SaleAddressesStructOutput;
      }
    ],
    "view"
  >;

  saleStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalInvestmentAmount: bigint;
        totalParticipants: bigint;
        totalSaleTokenAmount: bigint;
      }
    ],
    "view"
  >;

  setNftContract: TypedContractMethod<
    [nftContractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setRefundDetails: TypedContractMethod<
    [newRefundDetails: IDappadSale.SaleRefundDetailsStruct],
    [boolean],
    "nonpayable"
  >;

  setSaleAddresses: TypedContractMethod<
    [newSaleAddresses: IDappadSale.SaleAddressesStruct],
    [boolean],
    "nonpayable"
  >;

  setSaleDetails: TypedContractMethod<
    [newSaleDetails: IDappadSale.SaleDetailsStruct],
    [boolean],
    "nonpayable"
  >;

  setSaleFcfsDetails: TypedContractMethod<
    [newFcfsDetails: IDappadSale.SaleFcfsDetailsStruct],
    [boolean],
    "nonpayable"
  >;

  setSalePaused: TypedContractMethod<
    [salePaused: boolean],
    [boolean],
    "nonpayable"
  >;

  setStakeContract: TypedContractMethod<
    [stakeContractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setTicketDetails: TypedContractMethod<
    [newTicketDetails: IDappadSale.SaleTicketDetailsStruct],
    [boolean],
    "nonpayable"
  >;

  setTierDetails: TypedContractMethod<
    [
      tierIndex: BigNumberish,
      newTierDetails: IDappadSale.SaleTierDetailsStruct
    ],
    [boolean],
    "nonpayable"
  >;

  setTierDetailsBatch: TypedContractMethod<
    [newTierDetails: IDappadSale.SaleTierDetailsStruct[]],
    [boolean],
    "nonpayable"
  >;

  setVestingContract: TypedContractMethod<
    [vestingContractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  stakeContract: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tierDetails: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string] & {
        minInvestmentAmount: bigint;
        maxInvestmentAmount: bigint;
        investmentAmount: bigint;
        ticketAmount: bigint;
        totalParticipants: bigint;
        whitelistMerkleRoot: string;
      }
    ],
    "view"
  >;

  totalVestingAmount: TypedContractMethod<[], [bigint], "view">;

  vestingContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkTicketEligibility"
  ): TypedContractMethod<
    [userAddress: AddressLike, proof: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkWhitelistEligibility"
  ): TypedContractMethod<
    [userAddress: AddressLike, userTierIndex: BigNumberish, proof: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeSale"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyOnly"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllTierDetails"
  ): TypedContractMethod<
    [],
    [IDappadSale.SaleTierDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFactoryContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIsSaleActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getNftAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRefundEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSaleEndDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSaleTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSaleTokenPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakeContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTierCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTierDetailsByIndex"
  ): TypedContractMethod<
    [tierIndex: BigNumberish],
    [IDappadSale.SaleTierDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInvestmentAmount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserRefunded"
  ): TypedContractMethod<[userAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "investmentAmounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "joinFcfsSale"
  ): TypedContractMethod<[whitelistProof: BytesLike[]], [boolean], "payable">;
  getFunction(
    nameOrSignature: "joinSale"
  ): TypedContractMethod<
    [whitelistProof: BytesLike[], ticketProof: BytesLike[]],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "joinedNftIdCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "joinedNftIdCountFcfs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "joinedNftIds"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinedNftIdsFcfs"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinedNftIdsFcfsOwner"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "joinedNftIdsOwner"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "refunded"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sale"
  ): TypedContractMethod<
    [],
    [
      [
        IDappadSale.SaleDetailsStructOutput,
        IDappadSale.SaleFcfsDetailsStructOutput,
        IDappadSale.SaleRefundDetailsStructOutput,
        IDappadSale.SaleTicketDetailsStructOutput,
        IDappadSale.SaleAddressesStructOutput
      ] & {
        saleDetails: IDappadSale.SaleDetailsStructOutput;
        fcfsDetails: IDappadSale.SaleFcfsDetailsStructOutput;
        refundDetails: IDappadSale.SaleRefundDetailsStructOutput;
        ticketDetails: IDappadSale.SaleTicketDetailsStructOutput;
        saleAddresses: IDappadSale.SaleAddressesStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "saleStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalInvestmentAmount: bigint;
        totalParticipants: bigint;
        totalSaleTokenAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setNftContract"
  ): TypedContractMethod<
    [nftContractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRefundDetails"
  ): TypedContractMethod<
    [newRefundDetails: IDappadSale.SaleRefundDetailsStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSaleAddresses"
  ): TypedContractMethod<
    [newSaleAddresses: IDappadSale.SaleAddressesStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSaleDetails"
  ): TypedContractMethod<
    [newSaleDetails: IDappadSale.SaleDetailsStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSaleFcfsDetails"
  ): TypedContractMethod<
    [newFcfsDetails: IDappadSale.SaleFcfsDetailsStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSalePaused"
  ): TypedContractMethod<[salePaused: boolean], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakeContract"
  ): TypedContractMethod<
    [stakeContractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTicketDetails"
  ): TypedContractMethod<
    [newTicketDetails: IDappadSale.SaleTicketDetailsStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTierDetails"
  ): TypedContractMethod<
    [
      tierIndex: BigNumberish,
      newTierDetails: IDappadSale.SaleTierDetailsStruct
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTierDetailsBatch"
  ): TypedContractMethod<
    [newTierDetails: IDappadSale.SaleTierDetailsStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVestingContract"
  ): TypedContractMethod<
    [vestingContractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tierDetails"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string] & {
        minInvestmentAmount: bigint;
        maxInvestmentAmount: bigint;
        investmentAmount: bigint;
        ticketAmount: bigint;
        totalParticipants: bigint;
        whitelistMerkleRoot: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalVestingAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "NFTContractUpdated"
  ): TypedContractEvent<
    NFTContractUpdatedEvent.InputTuple,
    NFTContractUpdatedEvent.OutputTuple,
    NFTContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SaleAddressesUpdated"
  ): TypedContractEvent<
    SaleAddressesUpdatedEvent.InputTuple,
    SaleAddressesUpdatedEvent.OutputTuple,
    SaleAddressesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleCompleted"
  ): TypedContractEvent<
    SaleCompletedEvent.InputTuple,
    SaleCompletedEvent.OutputTuple,
    SaleCompletedEvent.OutputObject
  >;
  getEvent(
    key: "SaleDetailsUpdated"
  ): TypedContractEvent<
    SaleDetailsUpdatedEvent.InputTuple,
    SaleDetailsUpdatedEvent.OutputTuple,
    SaleDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleFcfsDetailsUpdated"
  ): TypedContractEvent<
    SaleFcfsDetailsUpdatedEvent.InputTuple,
    SaleFcfsDetailsUpdatedEvent.OutputTuple,
    SaleFcfsDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SalePausedUpdated"
  ): TypedContractEvent<
    SalePausedUpdatedEvent.InputTuple,
    SalePausedUpdatedEvent.OutputTuple,
    SalePausedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleRefundDetailsUpdated"
  ): TypedContractEvent<
    SaleRefundDetailsUpdatedEvent.InputTuple,
    SaleRefundDetailsUpdatedEvent.OutputTuple,
    SaleRefundDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleTicketDetailsUpdated"
  ): TypedContractEvent<
    SaleTicketDetailsUpdatedEvent.InputTuple,
    SaleTicketDetailsUpdatedEvent.OutputTuple,
    SaleTicketDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleTierDetailsBatchUpdated"
  ): TypedContractEvent<
    SaleTierDetailsBatchUpdatedEvent.InputTuple,
    SaleTierDetailsBatchUpdatedEvent.OutputTuple,
    SaleTierDetailsBatchUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleTierDetailsUpdated"
  ): TypedContractEvent<
    SaleTierDetailsUpdatedEvent.InputTuple,
    SaleTierDetailsUpdatedEvent.OutputTuple,
    SaleTierDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeContractUpdated"
  ): TypedContractEvent<
    StakeContractUpdatedEvent.InputTuple,
    StakeContractUpdatedEvent.OutputTuple,
    StakeContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserJoinedSale"
  ): TypedContractEvent<
    UserJoinedSaleEvent.InputTuple,
    UserJoinedSaleEvent.OutputTuple,
    UserJoinedSaleEvent.OutputObject
  >;
  getEvent(
    key: "UserRefundedSale"
  ): TypedContractEvent<
    UserRefundedSaleEvent.InputTuple,
    UserRefundedSaleEvent.OutputTuple,
    UserRefundedSaleEvent.OutputObject
  >;
  getEvent(
    key: "VestingContractUpdated"
  ): TypedContractEvent<
    VestingContractUpdatedEvent.InputTuple,
    VestingContractUpdatedEvent.OutputTuple,
    VestingContractUpdatedEvent.OutputObject
  >;

  filters: {
    "NFTContractUpdated(address)": TypedContractEvent<
      NFTContractUpdatedEvent.InputTuple,
      NFTContractUpdatedEvent.OutputTuple,
      NFTContractUpdatedEvent.OutputObject
    >;
    NFTContractUpdated: TypedContractEvent<
      NFTContractUpdatedEvent.InputTuple,
      NFTContractUpdatedEvent.OutputTuple,
      NFTContractUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SaleAddressesUpdated(tuple)": TypedContractEvent<
      SaleAddressesUpdatedEvent.InputTuple,
      SaleAddressesUpdatedEvent.OutputTuple,
      SaleAddressesUpdatedEvent.OutputObject
    >;
    SaleAddressesUpdated: TypedContractEvent<
      SaleAddressesUpdatedEvent.InputTuple,
      SaleAddressesUpdatedEvent.OutputTuple,
      SaleAddressesUpdatedEvent.OutputObject
    >;

    "SaleCompleted(address,uint256,address,uint256)": TypedContractEvent<
      SaleCompletedEvent.InputTuple,
      SaleCompletedEvent.OutputTuple,
      SaleCompletedEvent.OutputObject
    >;
    SaleCompleted: TypedContractEvent<
      SaleCompletedEvent.InputTuple,
      SaleCompletedEvent.OutputTuple,
      SaleCompletedEvent.OutputObject
    >;

    "SaleDetailsUpdated(tuple)": TypedContractEvent<
      SaleDetailsUpdatedEvent.InputTuple,
      SaleDetailsUpdatedEvent.OutputTuple,
      SaleDetailsUpdatedEvent.OutputObject
    >;
    SaleDetailsUpdated: TypedContractEvent<
      SaleDetailsUpdatedEvent.InputTuple,
      SaleDetailsUpdatedEvent.OutputTuple,
      SaleDetailsUpdatedEvent.OutputObject
    >;

    "SaleFcfsDetailsUpdated(tuple)": TypedContractEvent<
      SaleFcfsDetailsUpdatedEvent.InputTuple,
      SaleFcfsDetailsUpdatedEvent.OutputTuple,
      SaleFcfsDetailsUpdatedEvent.OutputObject
    >;
    SaleFcfsDetailsUpdated: TypedContractEvent<
      SaleFcfsDetailsUpdatedEvent.InputTuple,
      SaleFcfsDetailsUpdatedEvent.OutputTuple,
      SaleFcfsDetailsUpdatedEvent.OutputObject
    >;

    "SalePausedUpdated(bool)": TypedContractEvent<
      SalePausedUpdatedEvent.InputTuple,
      SalePausedUpdatedEvent.OutputTuple,
      SalePausedUpdatedEvent.OutputObject
    >;
    SalePausedUpdated: TypedContractEvent<
      SalePausedUpdatedEvent.InputTuple,
      SalePausedUpdatedEvent.OutputTuple,
      SalePausedUpdatedEvent.OutputObject
    >;

    "SaleRefundDetailsUpdated(tuple)": TypedContractEvent<
      SaleRefundDetailsUpdatedEvent.InputTuple,
      SaleRefundDetailsUpdatedEvent.OutputTuple,
      SaleRefundDetailsUpdatedEvent.OutputObject
    >;
    SaleRefundDetailsUpdated: TypedContractEvent<
      SaleRefundDetailsUpdatedEvent.InputTuple,
      SaleRefundDetailsUpdatedEvent.OutputTuple,
      SaleRefundDetailsUpdatedEvent.OutputObject
    >;

    "SaleTicketDetailsUpdated(tuple)": TypedContractEvent<
      SaleTicketDetailsUpdatedEvent.InputTuple,
      SaleTicketDetailsUpdatedEvent.OutputTuple,
      SaleTicketDetailsUpdatedEvent.OutputObject
    >;
    SaleTicketDetailsUpdated: TypedContractEvent<
      SaleTicketDetailsUpdatedEvent.InputTuple,
      SaleTicketDetailsUpdatedEvent.OutputTuple,
      SaleTicketDetailsUpdatedEvent.OutputObject
    >;

    "SaleTierDetailsBatchUpdated(tuple[])": TypedContractEvent<
      SaleTierDetailsBatchUpdatedEvent.InputTuple,
      SaleTierDetailsBatchUpdatedEvent.OutputTuple,
      SaleTierDetailsBatchUpdatedEvent.OutputObject
    >;
    SaleTierDetailsBatchUpdated: TypedContractEvent<
      SaleTierDetailsBatchUpdatedEvent.InputTuple,
      SaleTierDetailsBatchUpdatedEvent.OutputTuple,
      SaleTierDetailsBatchUpdatedEvent.OutputObject
    >;

    "SaleTierDetailsUpdated(uint256,tuple)": TypedContractEvent<
      SaleTierDetailsUpdatedEvent.InputTuple,
      SaleTierDetailsUpdatedEvent.OutputTuple,
      SaleTierDetailsUpdatedEvent.OutputObject
    >;
    SaleTierDetailsUpdated: TypedContractEvent<
      SaleTierDetailsUpdatedEvent.InputTuple,
      SaleTierDetailsUpdatedEvent.OutputTuple,
      SaleTierDetailsUpdatedEvent.OutputObject
    >;

    "StakeContractUpdated(address)": TypedContractEvent<
      StakeContractUpdatedEvent.InputTuple,
      StakeContractUpdatedEvent.OutputTuple,
      StakeContractUpdatedEvent.OutputObject
    >;
    StakeContractUpdated: TypedContractEvent<
      StakeContractUpdatedEvent.InputTuple,
      StakeContractUpdatedEvent.OutputTuple,
      StakeContractUpdatedEvent.OutputObject
    >;

    "UserJoinedSale(address,uint256,uint256)": TypedContractEvent<
      UserJoinedSaleEvent.InputTuple,
      UserJoinedSaleEvent.OutputTuple,
      UserJoinedSaleEvent.OutputObject
    >;
    UserJoinedSale: TypedContractEvent<
      UserJoinedSaleEvent.InputTuple,
      UserJoinedSaleEvent.OutputTuple,
      UserJoinedSaleEvent.OutputObject
    >;

    "UserRefundedSale(address,uint256)": TypedContractEvent<
      UserRefundedSaleEvent.InputTuple,
      UserRefundedSaleEvent.OutputTuple,
      UserRefundedSaleEvent.OutputObject
    >;
    UserRefundedSale: TypedContractEvent<
      UserRefundedSaleEvent.InputTuple,
      UserRefundedSaleEvent.OutputTuple,
      UserRefundedSaleEvent.OutputObject
    >;

    "VestingContractUpdated(address)": TypedContractEvent<
      VestingContractUpdatedEvent.InputTuple,
      VestingContractUpdatedEvent.OutputTuple,
      VestingContractUpdatedEvent.OutputObject
    >;
    VestingContractUpdated: TypedContractEvent<
      VestingContractUpdatedEvent.InputTuple,
      VestingContractUpdatedEvent.OutputTuple,
      VestingContractUpdatedEvent.OutputObject
    >;
  };
}
