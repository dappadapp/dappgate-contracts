/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDappadNodeSale {
  export type SaleDetailsStruct = {
    registerStart: BigNumberish;
    registerEnd: BigNumberish;
    registerTokenAmount: BigNumberish;
    saleStart: BigNumberish;
    saleEnd: BigNumberish;
    fcfsSaleDuration: BigNumberish;
    fcfsSaleExtraAllocation: BigNumberish;
    maxNodeCountPerUser: BigNumberish;
    requiredMinTierIndex: BigNumberish;
    projectOwnerFeePercentage: BigNumberish;
    salePaused: boolean;
    registerTokenEnabled: boolean;
    whitelistMerkleRoot: BytesLike;
  };

  export type SaleDetailsStructOutput = [
    registerStart: bigint,
    registerEnd: bigint,
    registerTokenAmount: bigint,
    saleStart: bigint,
    saleEnd: bigint,
    fcfsSaleDuration: bigint,
    fcfsSaleExtraAllocation: bigint,
    maxNodeCountPerUser: bigint,
    requiredMinTierIndex: bigint,
    projectOwnerFeePercentage: bigint,
    salePaused: boolean,
    registerTokenEnabled: boolean,
    whitelistMerkleRoot: string
  ] & {
    registerStart: bigint;
    registerEnd: bigint;
    registerTokenAmount: bigint;
    saleStart: bigint;
    saleEnd: bigint;
    fcfsSaleDuration: bigint;
    fcfsSaleExtraAllocation: bigint;
    maxNodeCountPerUser: bigint;
    requiredMinTierIndex: bigint;
    projectOwnerFeePercentage: bigint;
    salePaused: boolean;
    registerTokenEnabled: boolean;
    whitelistMerkleRoot: string;
  };

  export type SaleAddressesStruct = {
    stakeControllerAddress: AddressLike;
    registerTokenAddress: AddressLike;
    investmentTokenAddress: AddressLike;
    nftContractAddress: AddressLike;
    ownerAddress: AddressLike;
    adminAddress: AddressLike;
    launchpadFeeAddress: AddressLike;
    projectOwnerFeeAddress: AddressLike;
  };

  export type SaleAddressesStructOutput = [
    stakeControllerAddress: string,
    registerTokenAddress: string,
    investmentTokenAddress: string,
    nftContractAddress: string,
    ownerAddress: string,
    adminAddress: string,
    launchpadFeeAddress: string,
    projectOwnerFeeAddress: string
  ] & {
    stakeControllerAddress: string;
    registerTokenAddress: string;
    investmentTokenAddress: string;
    nftContractAddress: string;
    ownerAddress: string;
    adminAddress: string;
    launchpadFeeAddress: string;
    projectOwnerFeeAddress: string;
  };

  export type SaleStruct = {
    saleDetails: IDappadNodeSale.SaleDetailsStruct;
    saleAddresses: IDappadNodeSale.SaleAddressesStruct;
  };

  export type SaleStructOutput = [
    saleDetails: IDappadNodeSale.SaleDetailsStructOutput,
    saleAddresses: IDappadNodeSale.SaleAddressesStructOutput
  ] & {
    saleDetails: IDappadNodeSale.SaleDetailsStructOutput;
    saleAddresses: IDappadNodeSale.SaleAddressesStructOutput;
  };

  export type SaleNodeTierDetailsStruct = {
    id: BigNumberish;
    price: BigNumberish;
    nodeCount: BigNumberish;
    totalBoughtNodeCount: BigNumberish;
  };

  export type SaleNodeTierDetailsStructOutput = [
    id: bigint,
    price: bigint,
    nodeCount: bigint,
    totalBoughtNodeCount: bigint
  ] & {
    id: bigint;
    price: bigint;
    nodeCount: bigint;
    totalBoughtNodeCount: bigint;
  };

  export type SaleTierDetailsStruct = {
    minNodeTierIndex: BigNumberish;
    maxNodeTierIndex: BigNumberish;
  };

  export type SaleTierDetailsStructOutput = [
    minNodeTierIndex: bigint,
    maxNodeTierIndex: bigint
  ] & { minNodeTierIndex: bigint; maxNodeTierIndex: bigint };

  export type SaleParamsStruct = {
    sale: IDappadNodeSale.SaleStruct;
    nodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStruct[];
    tierDetails: IDappadNodeSale.SaleTierDetailsStruct[];
  };

  export type SaleParamsStructOutput = [
    sale: IDappadNodeSale.SaleStructOutput,
    nodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStructOutput[],
    tierDetails: IDappadNodeSale.SaleTierDetailsStructOutput[]
  ] & {
    sale: IDappadNodeSale.SaleStructOutput;
    nodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStructOutput[];
    tierDetails: IDappadNodeSale.SaleTierDetailsStructOutput[];
  };
}

export interface DappadNodeSaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "checkWhitelistEligibility"
      | "completeSale"
      | "emergencyOnly"
      | "getAllNodeTierDetails"
      | "getNodeTierDetailsByIndex"
      | "getRoleAdmin"
      | "getUserAvailableNodeTiers"
      | "getUserNodeCountByNodeTierIndex"
      | "getUserNodeCounts"
      | "getUserTotalNodeCount"
      | "grantRole"
      | "hasRole"
      | "investmentToken"
      | "joinFcfsSale"
      | "joinSale"
      | "nodeTierCount"
      | "nodeTierDetails"
      | "registerDetails"
      | "registerSale"
      | "registerToken"
      | "renounceRole"
      | "revokeRole"
      | "sale"
      | "saleStatistics"
      | "setNodeTierDetails"
      | "setNodeTierDetailsBatch"
      | "setSaleAddresses"
      | "setSaleDetails"
      | "setSalePaused"
      | "stakeControllerContract"
      | "supportsInterface"
      | "tierCount"
      | "tierDetails"
      | "userNodeCounts"
      | "withdrawRegisterToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SaleAddressesUpdated"
      | "SaleCompleted"
      | "SaleDetailsUpdated"
      | "SaleNodeTierDetailsBatchUpdated"
      | "SaleNodeTierDetailsUpdated"
      | "SalePausedUpdated"
      | "UserJoinedSale"
      | "UserRegisteredSale"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkWhitelistEligibility",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOnly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNodeTierDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeTierDetailsByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAvailableNodeTiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNodeCountByNodeTierIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNodeCounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalNodeCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinFcfsSale",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinSale",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeTierCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodeTierDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeTierDetails",
    values: [BigNumberish, IDappadNodeSale.SaleNodeTierDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeTierDetailsBatch",
    values: [IDappadNodeSale.SaleNodeTierDetailsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleAddresses",
    values: [IDappadNodeSale.SaleAddressesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleDetails",
    values: [IDappadNodeSale.SaleDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSalePaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeControllerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tierCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tierDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userNodeCounts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRegisterToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkWhitelistEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNodeTierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeTierDetailsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAvailableNodeTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNodeCountByNodeTierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNodeCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalNodeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinFcfsSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeTierCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeTierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodeTierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodeTierDetailsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeControllerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tierCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userNodeCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRegisterToken",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleAddressesUpdatedEvent {
  export type InputTuple = [
    newSaleAddresses: IDappadNodeSale.SaleAddressesStruct
  ];
  export type OutputTuple = [
    newSaleAddresses: IDappadNodeSale.SaleAddressesStructOutput
  ];
  export interface OutputObject {
    newSaleAddresses: IDappadNodeSale.SaleAddressesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleCompletedEvent {
  export type InputTuple = [
    projectOwnerFeeAddress: AddressLike,
    projectOwnerFeeAmount: BigNumberish,
    launchpadFeeAddress: AddressLike,
    launchpadFeeAmount: BigNumberish,
    completedTime: BigNumberish
  ];
  export type OutputTuple = [
    projectOwnerFeeAddress: string,
    projectOwnerFeeAmount: bigint,
    launchpadFeeAddress: string,
    launchpadFeeAmount: bigint,
    completedTime: bigint
  ];
  export interface OutputObject {
    projectOwnerFeeAddress: string;
    projectOwnerFeeAmount: bigint;
    launchpadFeeAddress: string;
    launchpadFeeAmount: bigint;
    completedTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleDetailsUpdatedEvent {
  export type InputTuple = [newSaleDetails: IDappadNodeSale.SaleDetailsStruct];
  export type OutputTuple = [
    newSaleDetails: IDappadNodeSale.SaleDetailsStructOutput
  ];
  export interface OutputObject {
    newSaleDetails: IDappadNodeSale.SaleDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleNodeTierDetailsBatchUpdatedEvent {
  export type InputTuple = [
    newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStruct[]
  ];
  export type OutputTuple = [
    newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStructOutput[]
  ];
  export interface OutputObject {
    newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleNodeTierDetailsUpdatedEvent {
  export type InputTuple = [
    tierIndex: BigNumberish,
    newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStruct
  ];
  export type OutputTuple = [
    tierIndex: bigint,
    newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStructOutput
  ];
  export interface OutputObject {
    tierIndex: bigint;
    newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalePausedUpdatedEvent {
  export type InputTuple = [salePaused: boolean];
  export type OutputTuple = [salePaused: boolean];
  export interface OutputObject {
    salePaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserJoinedSaleEvent {
  export type InputTuple = [
    user: AddressLike,
    nodeTierIndex: BigNumberish,
    nodeCount: BigNumberish,
    amount: BigNumberish,
    userNodeCount: BigNumberish,
    totalUserNodeCount: BigNumberish,
    totalInvestmentAmount: BigNumberish,
    totalBoughtNodeCount: BigNumberish,
    totalParticipants: BigNumberish,
    joinedTime: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    nodeTierIndex: bigint,
    nodeCount: bigint,
    amount: bigint,
    userNodeCount: bigint,
    totalUserNodeCount: bigint,
    totalInvestmentAmount: bigint,
    totalBoughtNodeCount: bigint,
    totalParticipants: bigint,
    joinedTime: bigint
  ];
  export interface OutputObject {
    user: string;
    nodeTierIndex: bigint;
    nodeCount: bigint;
    amount: bigint;
    userNodeCount: bigint;
    totalUserNodeCount: bigint;
    totalInvestmentAmount: bigint;
    totalBoughtNodeCount: bigint;
    totalParticipants: bigint;
    joinedTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredSaleEvent {
  export type InputTuple = [
    user: AddressLike,
    tierIndex: BigNumberish,
    registerTime: BigNumberish,
    totalRegisters: BigNumberish,
    totalRegisterTokenAmountLeft: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tierIndex: bigint,
    registerTime: bigint,
    totalRegisters: bigint,
    totalRegisterTokenAmountLeft: bigint
  ];
  export interface OutputObject {
    user: string;
    tierIndex: bigint;
    registerTime: bigint;
    totalRegisters: bigint;
    totalRegisterTokenAmountLeft: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DappadNodeSale extends BaseContract {
  connect(runner?: ContractRunner | null): DappadNodeSale;
  waitForDeployment(): Promise<this>;

  interface: DappadNodeSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  checkWhitelistEligibility: TypedContractMethod<
    [userAddress: AddressLike, proof: BytesLike[]],
    [boolean],
    "view"
  >;

  completeSale: TypedContractMethod<[], [boolean], "nonpayable">;

  emergencyOnly: TypedContractMethod<[], [boolean], "nonpayable">;

  getAllNodeTierDetails: TypedContractMethod<
    [],
    [IDappadNodeSale.SaleNodeTierDetailsStructOutput[]],
    "view"
  >;

  getNodeTierDetailsByIndex: TypedContractMethod<
    [tierIndex: BigNumberish],
    [IDappadNodeSale.SaleNodeTierDetailsStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserAvailableNodeTiers: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserNodeCountByNodeTierIndex: TypedContractMethod<
    [userAddress: AddressLike, nodeTierIndex: BigNumberish],
    [bigint],
    "view"
  >;

  getUserNodeCounts: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserTotalNodeCount: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  investmentToken: TypedContractMethod<[], [string], "view">;

  joinFcfsSale: TypedContractMethod<
    [
      amount: BigNumberish,
      nodeTierIndex: BigNumberish,
      nodeCount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  joinSale: TypedContractMethod<
    [
      amount: BigNumberish,
      nodeTierIndex: BigNumberish,
      nodeCount: BigNumberish,
      whitelistProof: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  nodeTierCount: TypedContractMethod<[], [bigint], "view">;

  nodeTierDetails: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        id: bigint;
        price: bigint;
        nodeCount: bigint;
        totalBoughtNodeCount: bigint;
      }
    ],
    "view"
  >;

  registerDetails: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        registerTokenAmount: bigint;
        tierIndex: bigint;
        registered: boolean;
      }
    ],
    "view"
  >;

  registerSale: TypedContractMethod<[], [boolean], "nonpayable">;

  registerToken: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sale: TypedContractMethod<
    [],
    [
      [
        IDappadNodeSale.SaleDetailsStructOutput,
        IDappadNodeSale.SaleAddressesStructOutput
      ] & {
        saleDetails: IDappadNodeSale.SaleDetailsStructOutput;
        saleAddresses: IDappadNodeSale.SaleAddressesStructOutput;
      }
    ],
    "view"
  >;

  saleStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalInvestmentAmount: bigint;
        totalBoughtNodeCount: bigint;
        totalParticipants: bigint;
        totalRegisters: bigint;
        totalRegisterTokenAmountLeft: bigint;
      }
    ],
    "view"
  >;

  setNodeTierDetails: TypedContractMethod<
    [
      tierIndex: BigNumberish,
      newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStruct
    ],
    [boolean],
    "nonpayable"
  >;

  setNodeTierDetailsBatch: TypedContractMethod<
    [newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStruct[]],
    [boolean],
    "nonpayable"
  >;

  setSaleAddresses: TypedContractMethod<
    [newSaleAddresses: IDappadNodeSale.SaleAddressesStruct],
    [boolean],
    "nonpayable"
  >;

  setSaleDetails: TypedContractMethod<
    [newSaleDetails: IDappadNodeSale.SaleDetailsStruct],
    [boolean],
    "nonpayable"
  >;

  setSalePaused: TypedContractMethod<
    [salePaused: boolean],
    [boolean],
    "nonpayable"
  >;

  stakeControllerContract: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tierCount: TypedContractMethod<[], [bigint], "view">;

  tierDetails: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { minNodeTierIndex: bigint; maxNodeTierIndex: bigint }],
    "view"
  >;

  userNodeCounts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawRegisterToken: TypedContractMethod<[], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkWhitelistEligibility"
  ): TypedContractMethod<
    [userAddress: AddressLike, proof: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeSale"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyOnly"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllNodeTierDetails"
  ): TypedContractMethod<
    [],
    [IDappadNodeSale.SaleNodeTierDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNodeTierDetailsByIndex"
  ): TypedContractMethod<
    [tierIndex: BigNumberish],
    [IDappadNodeSale.SaleNodeTierDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserAvailableNodeTiers"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserNodeCountByNodeTierIndex"
  ): TypedContractMethod<
    [userAddress: AddressLike, nodeTierIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserNodeCounts"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserTotalNodeCount"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "investmentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "joinFcfsSale"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      nodeTierIndex: BigNumberish,
      nodeCount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinSale"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      nodeTierIndex: BigNumberish,
      nodeCount: BigNumberish,
      whitelistProof: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nodeTierCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nodeTierDetails"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        id: bigint;
        price: bigint;
        nodeCount: bigint;
        totalBoughtNodeCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDetails"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        registerTokenAmount: bigint;
        tierIndex: bigint;
        registered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerSale"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "registerToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sale"
  ): TypedContractMethod<
    [],
    [
      [
        IDappadNodeSale.SaleDetailsStructOutput,
        IDappadNodeSale.SaleAddressesStructOutput
      ] & {
        saleDetails: IDappadNodeSale.SaleDetailsStructOutput;
        saleAddresses: IDappadNodeSale.SaleAddressesStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "saleStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalInvestmentAmount: bigint;
        totalBoughtNodeCount: bigint;
        totalParticipants: bigint;
        totalRegisters: bigint;
        totalRegisterTokenAmountLeft: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setNodeTierDetails"
  ): TypedContractMethod<
    [
      tierIndex: BigNumberish,
      newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStruct
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNodeTierDetailsBatch"
  ): TypedContractMethod<
    [newNodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStruct[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSaleAddresses"
  ): TypedContractMethod<
    [newSaleAddresses: IDappadNodeSale.SaleAddressesStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSaleDetails"
  ): TypedContractMethod<
    [newSaleDetails: IDappadNodeSale.SaleDetailsStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSalePaused"
  ): TypedContractMethod<[salePaused: boolean], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeControllerContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tierCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tierDetails"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { minNodeTierIndex: bigint; maxNodeTierIndex: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "userNodeCounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawRegisterToken"
  ): TypedContractMethod<[], [boolean], "nonpayable">;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SaleAddressesUpdated"
  ): TypedContractEvent<
    SaleAddressesUpdatedEvent.InputTuple,
    SaleAddressesUpdatedEvent.OutputTuple,
    SaleAddressesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleCompleted"
  ): TypedContractEvent<
    SaleCompletedEvent.InputTuple,
    SaleCompletedEvent.OutputTuple,
    SaleCompletedEvent.OutputObject
  >;
  getEvent(
    key: "SaleDetailsUpdated"
  ): TypedContractEvent<
    SaleDetailsUpdatedEvent.InputTuple,
    SaleDetailsUpdatedEvent.OutputTuple,
    SaleDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleNodeTierDetailsBatchUpdated"
  ): TypedContractEvent<
    SaleNodeTierDetailsBatchUpdatedEvent.InputTuple,
    SaleNodeTierDetailsBatchUpdatedEvent.OutputTuple,
    SaleNodeTierDetailsBatchUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SaleNodeTierDetailsUpdated"
  ): TypedContractEvent<
    SaleNodeTierDetailsUpdatedEvent.InputTuple,
    SaleNodeTierDetailsUpdatedEvent.OutputTuple,
    SaleNodeTierDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SalePausedUpdated"
  ): TypedContractEvent<
    SalePausedUpdatedEvent.InputTuple,
    SalePausedUpdatedEvent.OutputTuple,
    SalePausedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserJoinedSale"
  ): TypedContractEvent<
    UserJoinedSaleEvent.InputTuple,
    UserJoinedSaleEvent.OutputTuple,
    UserJoinedSaleEvent.OutputObject
  >;
  getEvent(
    key: "UserRegisteredSale"
  ): TypedContractEvent<
    UserRegisteredSaleEvent.InputTuple,
    UserRegisteredSaleEvent.OutputTuple,
    UserRegisteredSaleEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SaleAddressesUpdated(tuple)": TypedContractEvent<
      SaleAddressesUpdatedEvent.InputTuple,
      SaleAddressesUpdatedEvent.OutputTuple,
      SaleAddressesUpdatedEvent.OutputObject
    >;
    SaleAddressesUpdated: TypedContractEvent<
      SaleAddressesUpdatedEvent.InputTuple,
      SaleAddressesUpdatedEvent.OutputTuple,
      SaleAddressesUpdatedEvent.OutputObject
    >;

    "SaleCompleted(address,uint256,address,uint256,uint256)": TypedContractEvent<
      SaleCompletedEvent.InputTuple,
      SaleCompletedEvent.OutputTuple,
      SaleCompletedEvent.OutputObject
    >;
    SaleCompleted: TypedContractEvent<
      SaleCompletedEvent.InputTuple,
      SaleCompletedEvent.OutputTuple,
      SaleCompletedEvent.OutputObject
    >;

    "SaleDetailsUpdated(tuple)": TypedContractEvent<
      SaleDetailsUpdatedEvent.InputTuple,
      SaleDetailsUpdatedEvent.OutputTuple,
      SaleDetailsUpdatedEvent.OutputObject
    >;
    SaleDetailsUpdated: TypedContractEvent<
      SaleDetailsUpdatedEvent.InputTuple,
      SaleDetailsUpdatedEvent.OutputTuple,
      SaleDetailsUpdatedEvent.OutputObject
    >;

    "SaleNodeTierDetailsBatchUpdated(tuple[])": TypedContractEvent<
      SaleNodeTierDetailsBatchUpdatedEvent.InputTuple,
      SaleNodeTierDetailsBatchUpdatedEvent.OutputTuple,
      SaleNodeTierDetailsBatchUpdatedEvent.OutputObject
    >;
    SaleNodeTierDetailsBatchUpdated: TypedContractEvent<
      SaleNodeTierDetailsBatchUpdatedEvent.InputTuple,
      SaleNodeTierDetailsBatchUpdatedEvent.OutputTuple,
      SaleNodeTierDetailsBatchUpdatedEvent.OutputObject
    >;

    "SaleNodeTierDetailsUpdated(uint256,tuple)": TypedContractEvent<
      SaleNodeTierDetailsUpdatedEvent.InputTuple,
      SaleNodeTierDetailsUpdatedEvent.OutputTuple,
      SaleNodeTierDetailsUpdatedEvent.OutputObject
    >;
    SaleNodeTierDetailsUpdated: TypedContractEvent<
      SaleNodeTierDetailsUpdatedEvent.InputTuple,
      SaleNodeTierDetailsUpdatedEvent.OutputTuple,
      SaleNodeTierDetailsUpdatedEvent.OutputObject
    >;

    "SalePausedUpdated(bool)": TypedContractEvent<
      SalePausedUpdatedEvent.InputTuple,
      SalePausedUpdatedEvent.OutputTuple,
      SalePausedUpdatedEvent.OutputObject
    >;
    SalePausedUpdated: TypedContractEvent<
      SalePausedUpdatedEvent.InputTuple,
      SalePausedUpdatedEvent.OutputTuple,
      SalePausedUpdatedEvent.OutputObject
    >;

    "UserJoinedSale(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UserJoinedSaleEvent.InputTuple,
      UserJoinedSaleEvent.OutputTuple,
      UserJoinedSaleEvent.OutputObject
    >;
    UserJoinedSale: TypedContractEvent<
      UserJoinedSaleEvent.InputTuple,
      UserJoinedSaleEvent.OutputTuple,
      UserJoinedSaleEvent.OutputObject
    >;

    "UserRegisteredSale(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UserRegisteredSaleEvent.InputTuple,
      UserRegisteredSaleEvent.OutputTuple,
      UserRegisteredSaleEvent.OutputObject
    >;
    UserRegisteredSale: TypedContractEvent<
      UserRegisteredSaleEvent.InputTuple,
      UserRegisteredSaleEvent.OutputTuple,
      UserRegisteredSaleEvent.OutputObject
    >;
  };
}
