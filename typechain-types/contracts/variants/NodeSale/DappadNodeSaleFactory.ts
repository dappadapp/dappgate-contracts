/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDappadNodeSaleFactory {
  export type NodeSaleFactoryParamsStruct = { adminAddress: AddressLike };

  export type NodeSaleFactoryParamsStructOutput = [adminAddress: string] & {
    adminAddress: string;
  };
}

export declare namespace IDappadNodeSale {
  export type SaleDetailsStruct = {
    registerStart: BigNumberish;
    registerEnd: BigNumberish;
    registerTokenAmount: BigNumberish;
    saleStart: BigNumberish;
    saleEnd: BigNumberish;
    fcfsSaleDuration: BigNumberish;
    fcfsSaleExtraAllocation: BigNumberish;
    maxNodeCountPerUser: BigNumberish;
    requiredMinTierIndex: BigNumberish;
    projectOwnerFeePercentage: BigNumberish;
    salePaused: boolean;
    registerTokenEnabled: boolean;
    whitelistMerkleRoot: BytesLike;
  };

  export type SaleDetailsStructOutput = [
    registerStart: bigint,
    registerEnd: bigint,
    registerTokenAmount: bigint,
    saleStart: bigint,
    saleEnd: bigint,
    fcfsSaleDuration: bigint,
    fcfsSaleExtraAllocation: bigint,
    maxNodeCountPerUser: bigint,
    requiredMinTierIndex: bigint,
    projectOwnerFeePercentage: bigint,
    salePaused: boolean,
    registerTokenEnabled: boolean,
    whitelistMerkleRoot: string
  ] & {
    registerStart: bigint;
    registerEnd: bigint;
    registerTokenAmount: bigint;
    saleStart: bigint;
    saleEnd: bigint;
    fcfsSaleDuration: bigint;
    fcfsSaleExtraAllocation: bigint;
    maxNodeCountPerUser: bigint;
    requiredMinTierIndex: bigint;
    projectOwnerFeePercentage: bigint;
    salePaused: boolean;
    registerTokenEnabled: boolean;
    whitelistMerkleRoot: string;
  };

  export type SaleAddressesStruct = {
    stakeControllerAddress: AddressLike;
    registerTokenAddress: AddressLike;
    investmentTokenAddress: AddressLike;
    nftContractAddress: AddressLike;
    ownerAddress: AddressLike;
    adminAddress: AddressLike;
    launchpadFeeAddress: AddressLike;
    projectOwnerFeeAddress: AddressLike;
  };

  export type SaleAddressesStructOutput = [
    stakeControllerAddress: string,
    registerTokenAddress: string,
    investmentTokenAddress: string,
    nftContractAddress: string,
    ownerAddress: string,
    adminAddress: string,
    launchpadFeeAddress: string,
    projectOwnerFeeAddress: string
  ] & {
    stakeControllerAddress: string;
    registerTokenAddress: string;
    investmentTokenAddress: string;
    nftContractAddress: string;
    ownerAddress: string;
    adminAddress: string;
    launchpadFeeAddress: string;
    projectOwnerFeeAddress: string;
  };

  export type SaleStruct = {
    saleDetails: IDappadNodeSale.SaleDetailsStruct;
    saleAddresses: IDappadNodeSale.SaleAddressesStruct;
  };

  export type SaleStructOutput = [
    saleDetails: IDappadNodeSale.SaleDetailsStructOutput,
    saleAddresses: IDappadNodeSale.SaleAddressesStructOutput
  ] & {
    saleDetails: IDappadNodeSale.SaleDetailsStructOutput;
    saleAddresses: IDappadNodeSale.SaleAddressesStructOutput;
  };

  export type SaleNodeTierDetailsStruct = {
    id: BigNumberish;
    price: BigNumberish;
    nodeCount: BigNumberish;
    totalBoughtNodeCount: BigNumberish;
  };

  export type SaleNodeTierDetailsStructOutput = [
    id: bigint,
    price: bigint,
    nodeCount: bigint,
    totalBoughtNodeCount: bigint
  ] & {
    id: bigint;
    price: bigint;
    nodeCount: bigint;
    totalBoughtNodeCount: bigint;
  };

  export type SaleTierDetailsStruct = {
    minNodeTierIndex: BigNumberish;
    maxNodeTierIndex: BigNumberish;
  };

  export type SaleTierDetailsStructOutput = [
    minNodeTierIndex: bigint,
    maxNodeTierIndex: bigint
  ] & { minNodeTierIndex: bigint; maxNodeTierIndex: bigint };

  export type SaleParamsStruct = {
    sale: IDappadNodeSale.SaleStruct;
    nodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStruct[];
    tierDetails: IDappadNodeSale.SaleTierDetailsStruct[];
  };

  export type SaleParamsStructOutput = [
    sale: IDappadNodeSale.SaleStructOutput,
    nodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStructOutput[],
    tierDetails: IDappadNodeSale.SaleTierDetailsStructOutput[]
  ] & {
    sale: IDappadNodeSale.SaleStructOutput;
    nodeTierDetails: IDappadNodeSale.SaleNodeTierDetailsStructOutput[];
    tierDetails: IDappadNodeSale.SaleTierDetailsStructOutput[];
  };
}

export interface DappadNodeSaleFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "allSales"
      | "createSale"
      | "getRoleAdmin"
      | "getSale"
      | "getSaleCount"
      | "grantRole"
      | "hasRole"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SaleCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [IDappadNodeSale.SaleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allSales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSaleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleCreatedEvent {
  export type InputTuple = [
    saleParams: IDappadNodeSale.SaleParamsStruct,
    saleAddress: AddressLike
  ];
  export type OutputTuple = [
    saleParams: IDappadNodeSale.SaleParamsStructOutput,
    saleAddress: string
  ];
  export interface OutputObject {
    saleParams: IDappadNodeSale.SaleParamsStructOutput;
    saleAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DappadNodeSaleFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DappadNodeSaleFactory;
  waitForDeployment(): Promise<this>;

  interface: DappadNodeSaleFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  allSales: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createSale: TypedContractMethod<
    [_saleParams: IDappadNodeSale.SaleParamsStruct],
    [boolean],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSale: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getSaleCount: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allSales"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createSale"
  ): TypedContractMethod<
    [_saleParams: IDappadNodeSale.SaleParamsStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSale"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSaleCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SaleCreated"
  ): TypedContractEvent<
    SaleCreatedEvent.InputTuple,
    SaleCreatedEvent.OutputTuple,
    SaleCreatedEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SaleCreated(tuple,address)": TypedContractEvent<
      SaleCreatedEvent.InputTuple,
      SaleCreatedEvent.OutputTuple,
      SaleCreatedEvent.OutputObject
    >;
    SaleCreated: TypedContractEvent<
      SaleCreatedEvent.InputTuple,
      SaleCreatedEvent.OutputTuple,
      SaleCreatedEvent.OutputObject
    >;
  };
}
