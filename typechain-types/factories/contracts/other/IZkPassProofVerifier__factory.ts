/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IZkPassProofVerifier,
  IZkPassProofVerifierInterface,
} from "../../../contracts/other/IZkPassProofVerifier";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "taskId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "schemaId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "uHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "publicFieldsHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "validator",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "allocatorSignature",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "validatorSignature",
            type: "bytes",
          },
        ],
        internalType: "struct IZkPassProofVerifier.ZkPassProof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IZkPassProofVerifier__factory {
  static readonly abi = _abi;
  static createInterface(): IZkPassProofVerifierInterface {
    return new Interface(_abi) as IZkPassProofVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IZkPassProofVerifier {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IZkPassProofVerifier;
  }
}
